<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Conduit File Accounts and Transactions" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defaults" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numberOfAccounts" elementType="Argument">
            <stringProp name="Argument.name">numberOfAccounts</stringProp>
            <stringProp name="Argument.value">100000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of accounts to generate</stringProp>
          </elementProp>
          <elementProp name="groupOffset" elementType="Argument">
            <stringProp name="Argument.name">groupOffset</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountOffset" elementType="Argument">
            <stringProp name="Argument.name">accountOffset</stringProp>
            <stringProp name="Argument.value">1001</stringProp>
            <stringProp name="Argument.desc">Starting account offset</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountPrefix" elementType="Argument">
            <stringProp name="Argument.name">accountPrefix</stringProp>
            <stringProp name="Argument.value">DDA-1-</stringProp>
            <stringProp name="Argument.desc">Account UID prefix</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sourceCompanyId" elementType="Argument">
            <stringProp name="Argument.name">sourceCompanyId</stringProp>
            <stringProp name="Argument.value">perf</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The company source ID to place accounts under</stringProp>
          </elementProp>
          <elementProp name="minMaxTxnsPerAcct" elementType="Argument">
            <stringProp name="Argument.name">minMaxTxnsPerAcct</stringProp>
            <stringProp name="Argument.value">1-5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Min and max transactions (random) to create per account</stringProp>
          </elementProp>
          <elementProp name="numOfThreads" elementType="Argument">
            <stringProp name="Argument.name">numOfThreads</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How many files to generate</stringProp>
          </elementProp>
          <elementProp name="categorizeTransactions" elementType="Argument">
            <stringProp name="Argument.name">categorizeTransactions</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Enable/disable categorization</stringProp>
          </elementProp>
          <elementProp name="categorizationPercent" elementType="Argument">
            <stringProp name="Argument.name">categorizationPercent</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How many transaction % wise shoudl have valid mcc codes</stringProp>
          </elementProp>
          <elementProp name="conduitFileDropPath" elementType="Argument">
            <stringProp name="Argument.name">conduitFileDropPath</stringProp>
            <stringProp name="Argument.value">/tmp/work</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Default to user.home</stringProp>
          </elementProp>
          <elementProp name="suppressAlerts" elementType="Argument">
            <stringProp name="Argument.name">suppressAlerts</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Enable/disable alerts (supress flag)</stringProp>
          </elementProp>
          <elementProp name="threadMultiplier" elementType="Argument">
            <stringProp name="Argument.name">threadMultiplier</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Thread multiplier - only used for file name</stringProp>
          </elementProp>
          <elementProp name="serverName" elementType="Argument">
            <stringProp name="Argument.name">serverName</stringProp>
            <stringProp name="Argument.value">cond1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Server name - only used for file name</stringProp>
          </elementProp>
          <elementProp name="numOfGroups" elementType="Argument">
            <stringProp name="Argument.name">numOfGroups</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="groupOffset" elementType="Argument">
            <stringProp name="Argument.name">groupOffset</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="txnsOnly" elementType="Argument">
            <stringProp name="Argument.name">txnsOnly</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="parseOnly" elementType="Argument">
            <stringProp name="Argument.name">parseOnly</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Reset defaults" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">// reset default if properties are given
import java.text.SimpleDateFormat;

if (props.get(&quot;numberOfAccounts&quot;) != null) {
	vars.put(&quot;numberOfAccounts&quot;, props.get(&quot;numberOfAccounts&quot;));
	vars.put(&quot;accountOffset&quot;, props.get(&quot;accountOffset&quot;));
	vars.put(&quot;groupOffset&quot;, props.get(&quot;groupOffset&quot;));
	vars.put(&quot;accountPrefix&quot;, props.get(&quot;accountPrefix&quot;));
	vars.put(&quot;sourceCompanyId&quot;, props.get(&quot;sourceCompanyId&quot;));
	vars.put(&quot;minMaxTxnsPerAcct&quot;, props.get(&quot;minMaxTxnsPerAcct&quot;));
	vars.put(&quot;numOfThreads&quot;, props.get(&quot;numOfThreads&quot;));
	vars.put(&quot;threadMultiplier&quot;, props.get(&quot;threadMultiplier&quot;));
	vars.put(&quot;categorizeTransactions&quot;, props.get(&quot;categorizeTransactions&quot;));
	vars.put(&quot;categorizationPercent&quot;, props.get(&quot;categorizationPercent&quot;));
	vars.put(&quot;conduitFileDropPath&quot;, props.get(&quot;conduitFileDropPath&quot;));
	vars.put(&quot;suppressAlerts&quot;, props.get(&quot;suppressAlerts&quot;));
	vars.put(&quot;serverName&quot;, props.get(&quot;serverName&quot;));
	vars.put(&quot;txnsOnly&quot;, props.get(&quot;txnsOnly&quot;));
	vars.put(&quot;parseOnly&quot;, &quot;true&quot;.equals(props.get(&quot;parseOnly&quot;)) ? &quot;true&quot; : &quot;false&quot;);
}

if (vars.get(&quot;conduitFileDropPath&quot;).isEmpty()) {
	vars.put(&quot;conduitFileDropPath&quot;, System.getProperty(&quot;user.home&quot;));
}

if (props.get(&quot;fileDateString&quot;) != null) {
	vars.put(&quot;fileDate&quot;, props.get(&quot;fileDateString&quot;));
}
else{
	vars.put(&quot;fileDate&quot;, new SimpleDateFormat(&quot;yyyyMMdd&quot;).format(new Date()));
}
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(numOfGroups)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(numOfThreads)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="MCC and Transaction Names" enabled="true">
          <stringProp name="BeanShellSampler.query">
String mcc = &quot;2741,5192,5812,5813,5814,5942,5945,5946,5947,5963,5964,5965,5968,5973,5978,5992,&quot; +
	&quot;5994,5995,6010,6012,6300,6399,7012,7261,7277,7333,7338,7395,7699,9311,9399,0742,4511,&quot; +
	&quot;4722,3023,3058,3061,3219,3357,3649,5047,5122,5912,5975,5976,5976,7011,8011,8011,8021,8031,&quot; +
	&quot;8041,8041,8042,8043,8049,8050,8062,8062,8071,8071,8099&quot;;

String txNames = &quot;WALMART,SHELL,TARGET,MICRO CENTER,ATT,TONYS MKT,STARBUCKS,HOSPITAL,MICROSOFT,APPLE STORE,&quot;+
	&quot;BESTBUY,SPRINT,7-ELEVEN,KING SOOPERS,SAFEWAY,WALGREENS,KUM-N-GO,XCELL NRGY,COMFORT SUITES,AMAZON&quot;;

vars.put(&quot;mcc&quot;, mcc);
vars.put(&quot;txNames&quot;, txNames);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit Header" enabled="true">
          <stringProp name="BeanShellSampler.query">
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;


String cats = (&quot;true&quot;.equals(&quot;${categorizeTransactions}&quot;)) ? &quot;&quot; : &quot;-noc&quot;;
String alerts = (&quot;true&quot;.equals(&quot;${suppressAlerts}&quot;)) ? &quot;-noa&quot; : &quot;&quot;;
Date fd = new SimpleDateFormat(&quot;yyyyMMdd&quot;).parse(vars.get(&quot;fileDate&quot;));
if (fd == null) fd = new Date();
String eDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(fd);
String bDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date(fd.getTime()-45*24*60*60*1000L));
String fileDate = new SimpleDateFormat(&quot;yyyyMMdd&quot;).format(fd);
fileDate += &quot;-&quot; + new SimpleDateFormat(&quot;HHmmss&quot;).format(new Date());

String fileName = &quot;conduit-${sourceCompanyId}&quot; + 
    cats + 
    alerts + 
    &quot;-accts&quot; +
    &quot;-g&quot; + (vars.getIteration() + ${groupOffset}) +
    &quot;-t${__threadNum}&quot; + 
    &quot;-c${numberOfAccounts}&quot; +
    &quot;-tx${minMaxTxnsPerAcct}&quot; +
    &quot;-&quot; + fileDate +
    (${parseOnly} ? &quot;-parseOnly&quot; : &quot;&quot;);
vars.put(&quot;filename&quot;, fileName);
String filePath = &quot;${conduitFileDropPath}/&quot; + fileName + &quot;.txt&quot;;
vars.put(&quot;filePath&quot;, filePath);

File file = new File(filePath);
FileWriter fw = new FileWriter(file);
BufferedWriter bw = new BufferedWriter(fw);

vars.put(&quot;postingSeq&quot;, &quot;1&quot;);
vars.put(&quot;txnCount&quot;, &quot;0&quot;);
vars.put(&quot;acctCount&quot;, &quot;0&quot;);

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&lt;conduit&gt;\n&quot;);

String header = 
	&quot;  &lt;ver&gt;3.0&lt;/ver&gt;\n&quot; +
	&quot;  &lt;rqid&gt;&quot; + fileDate + &quot;&lt;/rqid&gt;\n&quot; +
	&quot;  &lt;txndtrng bdt=\&quot;&quot; + bDate + &quot;\&quot; edt=\&quot;&quot; + eDate + &quot;\&quot; /&gt;\n&quot; +
	(${parseOnly} ? &quot;  &lt;parse&gt;true&lt;/parse&gt;&lt;validate&gt;false&lt;/validate&gt;\n&quot; : &quot;&quot;);
	
header =
	&quot; &lt;hdr&gt;\n&quot; +
	header +
	&quot; &lt;/hdr&gt;\n&quot; +
	&quot; &lt;acctlst&gt;\n\n&quot;;	

bw.write(header);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${numberOfAccounts}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Start Account &lt;acct&gt;" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.Random;

long acctCount = ${acctCount};
String nbr = &quot;&quot; + (vars.getIteration()+${groupOffset}) + &quot;-&quot; + (acctCount+${accountOffset}) + &quot;-${__threadNum}&quot;;
// accounts uid must be prefixed with DDA for FTB testing
String accountUid = &quot;${accountPrefix}&quot; + nbr;
String[] products = new String[]{&quot;DEPOSIT_CHECKING&quot;,&quot;DEPOSIT_SAVINGS&quot;}; //,&quot;CREDIT_CARD&quot;};
String puid = products[new Random().nextInt(products.length)];

String xml =
  &quot;&lt;acct uid=\&quot;&quot; + accountUid + &quot;\&quot; cuid=\&quot;${sourceCompanyId}\&quot;&gt;\n&quot; +
  &quot;  &lt;nm&gt;Performance Test Acct-&quot;+nbr+&quot;&lt;/nm&gt;\n&quot; +
  &quot;  &lt;nbr&gt;&quot;+nbr+&quot;&lt;/nbr&gt;\n&quot; +
  &quot;  &lt;rttn&gt;082900872&lt;/rttn&gt;\n&quot;;
if (!&quot;true&quot;.equals(&quot;${txnsOnly}&quot;)){
  xml += &quot;  &lt;produid&gt;&quot;+puid+&quot;&lt;/produid&gt;\n&quot; +
    &quot;  &lt;avbal&gt;&quot;+(new Random().nextInt(9999))+&quot;.50&lt;/avbal&gt;\n&quot; +
    &quot;  &lt;bal&gt;&quot;+(new Random().nextInt(9999))+&quot;.75&lt;/bal&gt;\n&quot; +
    &quot;  &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\n&quot; +
    &quot;  &lt;alst&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;AlternateAccountNumber\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;&quot;+ nbr +&quot;&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;AlternateRoutingNumber\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;082900872&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;OverdraftLimit\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;1&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;OverdraftLimit\&quot; t=\&quot;s\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;0&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;OverdraftType\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;Basic Overdraft Protection&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;YearToDateInterest\&quot; t=\&quot;m\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;1.12&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;LastYearsInterest\&quot; t=\&quot;m\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;3.71&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;TotalHolds\&quot; t=\&quot;m\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;1.00&lt;/a&gt;\n&quot; +
    // past due date alert
    &quot;    &lt;a n=\&quot;PaymentDueDate\&quot; t=\&quot;d\&quot; d=\&quot;0\&quot; v=\&quot;0\&quot;&gt;2016/04/20&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;PastAmountDue\&quot; t=\&quot;m\&quot; d=\&quot;0\&quot; v=\&quot;0\&quot;&gt;100.00&lt;/a&gt;\n&quot; +
    &quot;    &lt;a n=\&quot;d3Extra.pastDue\&quot; t=\&quot;b\&quot; d=\&quot;0\&quot; v=\&quot;0\&quot;&gt;true&lt;/a&gt;\n&quot; +
    &quot;  &lt;/alst&gt;\n&quot;;
}

vars.put(&quot;xml&quot;, xml);
vars.put(&quot;acctCount&quot;, &quot;&quot; + (acctCount + 1));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Add Transactions &lt;txns/&gt;" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;
import java.util.UUID;

String xml = vars.get(&quot;xml&quot;);

Date fd = new SimpleDateFormat(&quot;yyyyMMdd&quot;).parse(vars.get(&quot;fileDate&quot;));
if (fd == null) fd = new Date();

String tDay = new SimpleDateFormat(&quot;yyMMddhhmm&quot;).format(fd);
//String postDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(fd);
boolean catsOn = &quot;true&quot;.equals(&quot;${categorizeTransactions}&quot;);
boolean suppressAlerts = &quot;true&quot;.equals(&quot;${suppressAlerts}&quot;);
String[] minMaxTxnsPerAcct = &quot;${minMaxTxnsPerAcct}&quot;.split(&quot;-&quot;);
int minTxns = new Integer(minMaxTxnsPerAcct[0]);
int maxTxns = new Integer(minMaxTxnsPerAcct[1]);
int txnsPerAccount = minTxns + (new Random().nextInt(maxTxns-minTxns+1));
long postingSeq = ${postingSeq};
long txnCount = ${txnCount};

String[] mcc = &quot;${mcc}&quot;.split(&quot;,&quot;);
String[] txNames = &quot;${txNames}&quot;.split(&quot;,&quot;);
String invalidTxName = &quot;NOCATSTXNAME&quot;;
String invalidMcc = &quot;0000&quot;;

xml += &quot;  &lt;txnlst&gt;\n&quot;;
for (int txn = 0; txn &lt; txnsPerAccount; txn++) {
	String mcCode = catsOn ? mcc[new Random().nextInt(mcc.length)] : invalidMcc;
	String txName = catsOn ? txNames[new Random().nextInt(txNames.length)] : invalidTxName;
	if (catsOn) {
		if (new Random().nextInt(100) &gt; (100-${categorizationPercent})) { // use invalid - most of the time
			mcCode = invalidMcc;
			txName = invalidTxName + txName;
		}
	}
	// mcCode = &quot;6300&quot;; // insurance - one to see T/O on categorization - to stress test
	// txName = &quot;INSURANCE UNDERWRITING / PREMIUMS&quot;;
	String amount = new Random().nextInt(999) + &quot;.00&quot;;
	String txnUid = UUID.randomUUID().toString().replaceAll(&quot;-&quot;, &quot;&quot;).substring(1);
	Date pastPostDate = new Date();
	pastPostDate.setDate(pastPostDate.getDate() - new Random().nextInt(30));
	String pastPostDateString = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(pastPostDate);

	xml += &quot;    &lt;txn uid=\&quot;&quot; + txnUid + &quot;\&quot;&quot; +
		&quot; tp=\&quot;d\&quot;&quot; + 							// TODO - debit or credit - from accountingClass??
		&quot; am=\&quot;&quot; + amount + &quot;\&quot;&quot; +
		&quot; mc=\&quot;&quot; + mcCode + &quot;\&quot;&quot; +
		&quot; od=\&quot;&quot; + pastPostDateString + &quot;\&quot;&quot; +
		&quot; pd=\&quot;&quot; + pastPostDateString + &quot;\&quot;&quot; +
		&quot; pn=\&quot;0\&quot;&quot; + 							// pending flag
		&quot; ps=\&quot;&quot; + (postingSeq++) + &quot;\&quot;&quot; +			// posting sequence 
		&quot; sa=\&quot;&quot; + (suppressAlerts?1:0) + &quot;\&quot;&gt;\n&quot; + 	// supress alerts flag
		&quot;      &lt;nm&gt;&quot; + txName + &quot;&lt;/nm&gt;\n&quot; + 
		&quot;    &lt;/txn&gt;\n&quot;;
			
	txnCount++;
}				
xml += &quot;  &lt;/txnlst&gt;\n&quot;;

vars.put(&quot;xml&quot;, xml);
vars.put(&quot;postingSeq&quot;, &quot;&quot;+postingSeq);
vars.put(&quot;txnCount&quot;, &quot;&quot;+txnCount);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="End Account &lt;acct&gt;" enabled="true">
            <stringProp name="BeanShellSampler.query">
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;


String xml = vars.get(&quot;xml&quot;);
xml += &quot;&lt;/acct&gt;\n\n&quot;;

File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file, true);
BufferedWriter bw = new BufferedWriter(fw);

bw.write(xml);
bw.flush();
bw.close();
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit End" enabled="true">
          <stringProp name="BeanShellSampler.query">
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file, true);
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;!-- txnCount: ${txnCount} --&gt;\n&quot;);

bw.write(&quot;&lt;/acctlst&gt;\n&lt;/conduit&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Rename Conduit Files" enabled="true">
          <stringProp name="BeanShellSampler.query">
String path = &quot;${conduitFileDropPath}/&quot;;
String name = &quot;${filename}&quot;;

File txtFile = new File(path+name+&quot;.txt&quot;);	
File xmlFile = new File(path+name+&quot;.xml&quot;);

txtFile.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
