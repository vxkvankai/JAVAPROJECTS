<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.4" jmeter="2.9 r1437961">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Conduit Perf Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="conduitFileDropPath" elementType="Argument">
            <stringProp name="Argument.name">conduitFileDropPath</stringProp>
            <stringProp name="Argument.value">C:\\dev\\incomingData\\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tempFilePath" elementType="Argument">
            <stringProp name="Argument.name">tempFilePath</stringProp>
            <stringProp name="Argument.value">C:\\dev\\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbURL" elementType="Argument">
            <stringProp name="Argument.name">dbURL</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbName" elementType="Argument">
            <stringProp name="Argument.name">dbName</stringProp>
            <stringProp name="Argument.value">d3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUserName" elementType="Argument">
            <stringProp name="Argument.name">dbUserName</stringProp>
            <stringProp name="Argument.value">d3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPassword" elementType="Argument">
            <stringProp name="Argument.name">dbPassword</stringProp>
            <stringProp name="Argument.value">d3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfBranchesToCreate" elementType="Argument">
            <stringProp name="Argument.name">numOfBranchesToCreate</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfUserToCreate" elementType="Argument">
            <stringProp name="Argument.name">numOfUserToCreate</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfAccountToCreate" elementType="Argument">
            <stringProp name="Argument.name">numOfAccountToCreate</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfTransaction" elementType="Argument">
            <stringProp name="Argument.name">numOfTransaction</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Conduit Performance Tests" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};${dbName}</stringProp>
          <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CleanUpTestData" enabled="true">
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="query">delete FROM [${dbName}].[dbo].[OLB_USER_MESSAGE]
delete FROM [${dbName}].[dbo].[ALERT_JOURNAL_PROPS]
delete FROM [${dbName}].[dbo].[ALERT_JOURNAL]
delete FROM [${dbName}].[dbo].[ALERT_USER_DEST_JOIN] where id&gt;4
delete FROM [${dbName}].[dbo].[ALERT_USER_DEST] where USER_DEST_ID &gt; 4 
delete FROM [${dbName}].[dbo].[ALERT_DEST_TYPE] where DEST_TYPE_ID &gt; 5
delete FROM [${dbName}].[dbo].[ALERT_USER_ALERT_PROPS] where USER_ALERT_ID &gt; 3
delete FROM [${dbName}].[dbo].[ALERT_USER_ALERT] where NOT USER_ID = 100
delete FROM [${dbName}].[dbo].[TRANSIENT_USER_EVENT]
delete FROM [${dbName}].[dbo].[SPLIT_CATEGORIZATION]
delete FROM [${dbName}].[dbo].[USER_TRANSACTION_JOIN]
delete FROM [${dbName}].[dbo].[OLB_TRANSACTION]
delete FROM [${dbName}].[dbo].[RENAMING_RULE]
delete FROM [${dbName}].[dbo].[USER_ACCOUNT_JOIN] where ID &gt;15
delete FROM [${dbName}].[dbo].[TRANSIENT_USER_EVENT]
delete FROM [${dbName}].[dbo].[OLB_USER] where USER_ID &gt; 101
delete FROM [${dbName}].[dbo].[TRANSFER]
delete FROM [${dbName}].[dbo].[OLB_ACCOUNT] where ACCOUNT_ID &gt;15
delete FROM [${dbName}].[dbo].[BRANCH] where ID &gt; 2
delete FROM [${dbName}].[dbo].[STORED_CONTENT] where id &gt; 2
delete FROM [${dbName}].[dbo].[CATEGORIZATION_RULE] where COMPANY_ID &gt; 2
delete FROM [${dbName}].[dbo].[CATEGORY] where COMPANY_ID &gt; 2
delete FROM [${dbName}].[dbo].[CATEGORY] where id &gt; 164
delete FROM [${dbName}].[dbo].[COMPANY_ATTRIBUTES] where COMPANY_STRUCTURE_ID &gt; 2
delete FROM [${dbName}].[dbo].[COMPANY_STRUCTURE] where id &gt; 2
delete FROM [${dbName}].[dbo].[BUSINESS]where ID&gt;4
delete FROM [${dbName}].[dbo].[ADMIN_USER] where USER_ID &gt; 3
delete FROM [${dbName}].[dbo].[PERSON]where ID &gt; 5
delete FROM [${dbName}].[dbo].[ADDRESS]
delete FROM [${dbName}].[dbo].[SYSTEM_EVENT]
delete FROM [${dbName}].[dbo].[CAMEL_MESSAGEPROCESSED]
delete FROM [${dbName}].[dbo].[CATEGORIZATION_RULE] where GENERATED = 1	
delete FROM [${dbName}].[dbo].[CREDENTIALS] where ID &gt; 5
delete FROM [${dbName}].[dbo].[BUDGET_CATEGORY]
delete FROM [${dbName}].[dbo].[BUDGET_PERIOD] 
delete FROM [${dbName}].[dbo].[BUDGET]
delete FROM [${dbName}].[dbo].[TERMS_OF_SERVICE_ACCEPTANCE] where NOT USER_ID = 100
delete FROM [${dbName}].[dbo].[FINANCIAL_GOAL] where ID &gt;13
delete FROM [${dbName}].[dbo].[TERMS_OF_SERVICE_ACCEPTANCE] where NOT USER_ID = 100
delete FROM [${dbName}].[dbo].[TERMS_OF_SERVICE_ACCEPTANCE]
delete FROM [${dbName}].[dbo].[FINANCIAL_GOAL_ACCOUNT] where id &gt; 13
delete FROM [${dbName}].[dbo].[FINANCIAL_GOAL] where ID &gt; 13
delete FROM [${dbName}].[dbo].[API_KEY] where COMPANY_ID &gt; 2
delete FROM [${dbName}].[dbo].[CATEGORY] where SUBCLASS = &apos;USER&apos;
delete FROM [${dbName}].[dbo].[OMIT_WORD] where id &gt; 37
delete FROM [${dbName}].[dbo].[TRANSFER]

select SYSDATETIME()
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">externalID</stringProp>
        </JDBCSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CreateBranches" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
          <stringProp name="TestPlan.comments">what is 2 plus 2 </stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropCreateBranchesFile" enabled="true">
            <stringProp name="BeanShellSampler.query">		 String tempPath = &quot;${conduitFileDropPath}create-branch-${__threadNum}.xml&quot;;
			 	File tempDest = new File(tempPath);
		 	 
				FileWriter fw = new FileWriter(tempDest.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
						&quot;&lt;conduitBranchRequest xmlns=\&quot;http://lodosoftware.com/conduit/branch\&quot;&gt;\r\n&quot; + 
						&quot;    &lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
						&quot;    &lt;authentication&gt;\r\n&quot; + 
						&quot;        &lt;username&gt;user&lt;/username&gt;\r\n&quot; + 
						&quot;        &lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
						&quot;    &lt;/authentication&gt;\r\n&quot; + 
						&quot;    &lt;branchList&gt;\r\n&quot;);
				for (int i = 0; i&lt; ${numOfBranchesToCreate}; i++)
				{
					bw.write(&quot;       &lt;branch externalId=\&quot;CreateBranchPerfTest-&quot;+(i+1)+&quot;\&quot; parentExternalId=\&quot;DEFAULT\&quot;&gt;\r\n&quot; + 
							&quot;            &lt;business&gt;\r\n&quot; + 
							&quot;                &lt;name&gt;Branch Perf Test&lt;/name&gt;\r\n&quot; + 
							&quot;                &lt;phone&gt;303-555-5656&lt;/phone&gt;\r\n&quot; + 
							&quot;                &lt;physicalAddress&gt;\r\n&quot; + 
							&quot;                    &lt;address1&gt;304 S INVERNESS, SUITE 785&lt;/address1&gt;\r\n&quot; + 
							&quot;                    &lt;city&gt;ENGLeWOOD&lt;/city&gt;\r\n&quot; + 
							&quot;                    &lt;state&gt;CO&lt;/state&gt;\r\n&quot; + 
							&quot;                    &lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
							&quot;                    &lt;postalCode&gt;80110&lt;/postalCode&gt;\r\n&quot; + 
							&quot;                    &lt;geoCode&gt;-94.2088557,36.3731619,0&lt;/geoCode&gt;\r\n&quot; + 
							&quot;                &lt;/physicalAddress&gt;\r\n&quot; + 
							&quot;                &lt;mailingAddress&gt;\r\n&quot; + 
							&quot;                    &lt;address1&gt;Arna PO BOX 189&lt;/address1&gt;\r\n&quot; + 
							&quot;                    &lt;city&gt;BENTONVILLE&lt;/city&gt;\r\n&quot; + 
							&quot;                    &lt;state&gt;AR&lt;/state&gt;\r\n&quot; + 
							&quot;                    &lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
							&quot;                    &lt;postalCode&gt;80287&lt;/postalCode&gt;\r\n&quot; + 
							&quot;                &lt;/mailingAddress&gt;\r\n&quot; + 
							&quot;	            &lt;contact1&gt;\r\n&quot; + 
							&quot;	               &lt;firstName&gt;Arna&lt;/firstName&gt;\r\n&quot; + 
							&quot;	               &lt;middleName&gt;M&lt;/middleName&gt;\r\n&quot; + 
							&quot;	               &lt;lastName&gt;Badyelkhan&lt;/lastName&gt;\r\n&quot; + 
							&quot;	               &lt;primaryEmail&gt;Johln@smith.com&lt;/primaryEmail&gt;\r\n&quot; + 
							&quot;	               &lt;alternateEmail&gt;Jolhn@Smith2.com&lt;/alternateEmail&gt;\r\n&quot; + 
							&quot;	               &lt;homePhone&gt;8885l55111&lt;/homePhone&gt;\r\n&quot; + 
							&quot;	               &lt;workPhone&gt;88855l51113&lt;/workPhone&gt;\r\n&quot; + 
							&quot;	               &lt;mobilePhone&gt;8885l551112&lt;/mobilePhone&gt;      \r\n&quot; + 
							&quot;	               &lt;employee&gt;false&lt;/employee&gt;\r\n&quot; + 
							&quot;	            &lt;/contact1&gt;\r\n&quot; + 
							&quot;	            &lt;contact2&gt;\r\n&quot; + 
							&quot;	               &lt;firstName&gt;Jane&lt;/firstName&gt;\r\n&quot; + 
							&quot;	               &lt;lastName&gt;Doe&lt;/lastName&gt;\r\n&quot; + 
							&quot;	               &lt;primaryEmail&gt;Jane@Doe2.com&lt;/primaryEmail&gt;\r\n&quot; + 
							&quot;	               &lt;alternateEmail&gt;Jane@Doe2.com&lt;/alternateEmail&gt;\r\n&quot; + 
							&quot;	               &lt;homePhone&gt;4545454&lt;/homePhone&gt;\r\n&quot; + 
							&quot;	               &lt;workPhone&gt;888551113&lt;/workPhone&gt;\r\n&quot; + 
							&quot;	               &lt;mobilePhone&gt;8885551112&lt;/mobilePhone&gt;\r\n&quot; + 
							&quot;	               &lt;employee&gt;false&lt;/employee&gt;\r\n&quot; + 
							&quot;	            &lt;/contact2&gt;\r\n&quot; + 
							&quot;            &lt;/business&gt;\r\n&quot; + 
							&quot;        &lt;/branch&gt;\r\n&quot;);
				}
				bw.write(&quot;    &lt;/branchList&gt;\r\n&quot; + 
						&quot;&lt;/conduitBranchRequest&gt;&quot;);
				bw.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitCreateBranchesConduitProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select  count(*)  from [${dbName}].[dbo].[BRANCH]  where EXTERNAL_ID LIKE &apos;CreateBranchPerfTest%&apos;) =?)
BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter

</stringProp>
            <stringProp name="queryArguments">${__V(${numOfBranchesToCreate})}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">totalBranches</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateCreatedBranches" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT CAST(
             CASE 
                  WHEN (select  count(*)  from [${dbName}].[dbo].[BRANCH]  where EXTERNAL_ID LIKE &apos;CreateBranchPerfTest%&apos;) = ${numOfBranchesToCreate}
                     THEN &apos;Y&apos;
                  ELSE &apos;N&apos; 
             END as nvarchar) as fileProcessSucceed
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">fileProcessSucceed</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateBranchesInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="89">Y</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="UpdateBranches" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropUpdateBranchesFile" enabled="true">
            <stringProp name="BeanShellSampler.query">		 String tempPath = &quot;${conduitFileDropPath}update-branch-${__threadNum}.xml&quot;;
			 	File tempDest = new File(tempPath);
		 	 
				FileWriter fw = new FileWriter(tempDest.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
						&quot;&lt;conduitBranchRequest xmlns=\&quot;http://lodosoftware.com/conduit/branch\&quot;&gt;\r\n&quot; + 
						&quot;    &lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
						&quot;    &lt;authentication&gt;\r\n&quot; + 
						&quot;        &lt;username&gt;user&lt;/username&gt;\r\n&quot; + 
						&quot;        &lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
						&quot;    &lt;/authentication&gt;\r\n&quot; + 
						&quot;    &lt;branchList&gt;\r\n&quot;);
				for (int i = 0; i&lt; ${numOfBranchesToCreate}; i++)
				{
					bw.write(&quot;       &lt;branch externalId=\&quot;CreateBranchPerfTest-&quot;+(i+1)+&quot;\&quot; parentExternalId=\&quot;DEFAULT\&quot;&gt;\r\n&quot; + 
							&quot;            &lt;business&gt;\r\n&quot; + 
							&quot;                &lt;name&gt;UpdateBranchPerfTest&lt;/name&gt;\r\n&quot; + 
							&quot;                &lt;phone&gt;303-5355-5656&lt;/phone&gt;\r\n&quot; + 
							&quot;                &lt;physicalAddress&gt;\r\n&quot; + 
							&quot;                    &lt;address1&gt;304 S INVERNESS, SUITE 400&lt;/address1&gt;\r\n&quot; + 
							&quot;                    &lt;city&gt;ENGLeWOOD&lt;/city&gt;\r\n&quot; + 
							&quot;                    &lt;state&gt;CO&lt;/state&gt;\r\n&quot; + 
							&quot;                    &lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
							&quot;                    &lt;postalCode&gt;80110&lt;/postalCode&gt;\r\n&quot; + 
							&quot;                    &lt;geoCode&gt;-94.2088557,36.3731619,0&lt;/geoCode&gt;\r\n&quot; + 
							&quot;                &lt;/physicalAddress&gt;\r\n&quot; + 
							&quot;                &lt;mailingAddress&gt;\r\n&quot; + 
							&quot;                    &lt;address1&gt;Arna PO BOX 189&lt;/address1&gt;\r\n&quot; + 
							&quot;                    &lt;city&gt;BENTONVILLE&lt;/city&gt;\r\n&quot; + 
							&quot;                    &lt;state&gt;AR&lt;/state&gt;\r\n&quot; + 
							&quot;                    &lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
							&quot;                    &lt;postalCode&gt;80287&lt;/postalCode&gt;\r\n&quot; + 
							&quot;                &lt;/mailingAddress&gt;\r\n&quot; + 
							&quot;	            &lt;contact1&gt;\r\n&quot; + 
							&quot;	               &lt;firstName&gt;Arna&lt;/firstName&gt;\r\n&quot; + 
							&quot;	               &lt;middleName&gt;M&lt;/middleName&gt;\r\n&quot; + 
							&quot;	               &lt;lastName&gt;Badyelkhan&lt;/lastName&gt;\r\n&quot; + 
							&quot;	               &lt;primaryEmail&gt;Johln@smith.com&lt;/primaryEmail&gt;\r\n&quot; + 
							&quot;	               &lt;alternateEmail&gt;Jolhn@Smith2.com&lt;/alternateEmail&gt;\r\n&quot; + 
							&quot;	               &lt;homePhone&gt;8885l551111&lt;/homePhone&gt;\r\n&quot; + 
							&quot;	               &lt;workPhone&gt;88855l51113&lt;/workPhone&gt;\r\n&quot; + 
							&quot;	               &lt;mobilePhone&gt;8885l551112&lt;/mobilePhone&gt;      \r\n&quot; + 
							&quot;	               &lt;employee&gt;false&lt;/employee&gt;\r\n&quot; + 
							&quot;	            &lt;/contact1&gt;\r\n&quot; + 
							&quot;	            &lt;contact2&gt;\r\n&quot; + 
							&quot;	               &lt;firstName&gt;Jane&lt;/firstName&gt;\r\n&quot; + 
							&quot;	               &lt;lastName&gt;Doe&lt;/lastName&gt;\r\n&quot; + 
							&quot;	               &lt;primaryEmail&gt;Jane@Doe2.com&lt;/primaryEmail&gt;\r\n&quot; + 
							&quot;	               &lt;alternateEmail&gt;Jane@Doe2.com&lt;/alternateEmail&gt;\r\n&quot; + 
							&quot;	               &lt;homePhone&gt;4545454&lt;/homePhone&gt;\r\n&quot; + 
							&quot;	               &lt;workPhone&gt;8885551113&lt;/workPhone&gt;\r\n&quot; + 
							&quot;	               &lt;mobilePhone&gt;8885551112&lt;/mobilePhone&gt;\r\n&quot; + 
							&quot;	               &lt;employee&gt;false&lt;/employee&gt;\r\n&quot; + 
							&quot;	            &lt;/contact2&gt;\r\n&quot; + 
							&quot;            &lt;/business&gt;\r\n&quot; + 
							&quot;        &lt;/branch&gt;\r\n&quot;);
				}
				bw.write(&quot;    &lt;/branchList&gt;\r\n&quot; + 
						&quot;&lt;/conduitBranchRequest&gt;&quot;);
				bw.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitUpdateBranchesConduitProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select count(*) FROM [${dbName}].[dbo].[BUSINESS] where name like &apos;UpdateBranchPerfTest&apos;) =?)
BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter

</stringProp>
            <stringProp name="queryArguments">${__V(${numOfBranchesToCreate})}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">totalBranches</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateUpdatedBranches" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT CAST(
             CASE 
                  WHEN (select  count(*)  from [${dbName}].[dbo].[BUSINESS]  where [NAME] LIKE &apos;UpdateBranchPerfTest%&apos;) = ${numOfBranchesToCreate}
                     THEN &apos;Y&apos;
                  ELSE &apos;N&apos; 
             END as nvarchar) as fileProcessSucceed
</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">fileProcessSucceed</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateBranchesInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="89">Y</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CreateUsersAccountsTransactions" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropCreateUserConduitFile" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.commons.io.FileUtils;

String tempFolder = &quot;${conduitFileDropPath}temp&quot;;
File tempDest1 = new File(tempFolder);
if (!tempDest1.exists())
{
   tempDest1.mkdirs();
}

String tempPath2 = tempFolder + &quot;\\\\create-user-${__threadNum}.xml&quot;;
File tempDest2 = new File(tempPath2);

int numOfAccountToCreate = ${numOfAccountToCreate}; 
int numOfTransaction = ${numOfTransaction}; 
int numOfUserToCreate = ${numOfUserToCreate};
	    
FileWriter fw2 = new FileWriter(tempDest2.getAbsoluteFile());
BufferedWriter bw2 = new BufferedWriter(fw2);
		
		bw2.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
				&quot;&lt;conduitUserRequest xmlns=\&quot;http://lodosoftware.com/conduit/user\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;\r\n&quot; + 
				&quot;    &lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
				&quot;    &lt;authentication&gt;\r\n&quot; + 
				&quot;        &lt;username&gt;userName&lt;/username&gt;\r\n&quot; + 
				&quot;        &lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
				&quot;    &lt;/authentication&gt;\r\n&quot; + 
				&quot;    &lt;transactionDateRange&gt;\r\n&quot; + 
				&quot;        &lt;beginDate&gt;2012-05-24&lt;/beginDate&gt;\r\n&quot; + 
				&quot;        &lt;endDate&gt;2012-05-30&lt;/endDate&gt;\r\n&quot; + 
				&quot;    &lt;/transactionDateRange&gt;\r\n&quot; + 
				&quot;    &lt;userList&gt;\r\n&quot;);
		
		int k = 0;
		for (int i = 0; i&lt;numOfUserToCreate; i++)
		{
			String userAccountAssociate= &quot;&quot;;
			for (int j = 0; j&lt; (numOfAccountToCreate/numOfUserToCreate); j++)
			{
				userAccountAssociate=   userAccountAssociate + &quot;\r\n&quot; +   
						&quot;                &lt;userAccount action=\&quot;associate\&quot;&gt;\r\n&quot; + 
						&quot;                    &lt;accountDirectId&gt;accountDirectID&quot;+(k+1)+&quot;&lt;/accountDirectId&gt;\r\n&quot; + 
						&quot;                    &lt;nickname&gt;TestNickName&quot;+(k+1)+&quot;&lt;/nickname&gt;\r\n&quot; + 
						&quot;                    &lt;excluded&gt;false&lt;/excluded&gt;\r\n&quot; + 
						&quot;                    &lt;hidden&gt;false&lt;/hidden&gt;\r\n&quot; + 
						&quot;                    &lt;hideByAdmin&gt;false&lt;/hideByAdmin&gt;\r\n&quot; + 
						&quot;                    &lt;displayOrder&gt;1&lt;/displayOrder&gt;\r\n&quot; + 
						&quot;                &lt;/userAccount&gt;&quot;;
				k = k+1;
			}
			if (numOfUserToCreate == (i+1))
			{
				for (int j = 0; j&lt; (numOfAccountToCreate-numOfUserToCreate*(numOfAccountToCreate/numOfUserToCreate)); j++)
				{
					userAccountAssociate=   userAccountAssociate + &quot;\r\n&quot; + 
							&quot;                &lt;userAccount action=\&quot;associate\&quot;&gt;\r\n&quot; + 
							&quot;                    &lt;accountDirectId&gt;accountDirectID&quot;+(k+1)+&quot;&lt;/accountDirectId&gt;\r\n&quot; + 
							&quot;                    &lt;nickname&gt;TestNickName&quot;+(k+1)+&quot;&lt;/nickname&gt;\r\n&quot; + 
							&quot;                    &lt;excluded&gt;false&lt;/excluded&gt;\r\n&quot; + 
							&quot;                    &lt;hidden&gt;false&lt;/hidden&gt;\r\n&quot; + 
							&quot;                    &lt;hideByAdmin&gt;false&lt;/hideByAdmin&gt;\r\n&quot; + 
							&quot;                    &lt;displayOrder&gt;1&lt;/displayOrder&gt;\r\n&quot; + 
							&quot;                &lt;/userAccount&gt;&quot;;
					k = k+1;
				}
			}
			bw2.write(&quot;        &lt;user directId=\&quot;TestUserDirectID&quot;+(i+1)+&quot;\&quot; directId2=\&quot;TestuserDirectID2&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;            &lt;loginId&gt;TestLogID&quot;+(i+1)+&quot;&lt;/loginId&gt;\r\n&quot; + 
					&quot;            &lt;branchExternalId&gt;CreateBranchPerfTest-1&lt;/branchExternalId&gt;\r\n&quot; + 
					&quot;            &lt;interfaceId&gt;9999&lt;/interfaceId&gt;\r\n&quot; + 
					&quot;            &lt;taxId&gt;304-26-2460&lt;/taxId&gt;\r\n&quot; + 
					&quot;            &lt;taxIdType&gt;SSN&lt;/taxIdType&gt;\r\n&quot; + 
					&quot;            &lt;locked&gt;false&lt;/locked&gt;\r\n&quot; + 
					&quot;            &lt;userEnabled&gt;false&lt;/userEnabled&gt;\r\n&quot; + 
					&quot;            &lt;emailOptOut&gt;false&lt;/emailOptOut&gt;\r\n&quot; + 
					&quot;            &lt;dateOfBirth&gt;1980-08-24&lt;/dateOfBirth&gt;\r\n&quot; + 
					&quot;            &lt;gender&gt;F&lt;/gender&gt;\r\n&quot; + 
					&quot;            &lt;billpaySubscriberId&gt;316492460304&lt;/billpaySubscriberId&gt;\r\n&quot; + 
					&quot;            &lt;billpayStatus&gt;billpayStatus.active&lt;/billpayStatus&gt;\r\n&quot; + 
					&quot;            &lt;mobile&gt;false&lt;/mobile&gt;\r\n&quot; + 
					&quot;            &lt;creditScore&gt;800&lt;/creditScore&gt;\r\n&quot; + 
					&quot;            &lt;creditScoreDate&gt;2012-04-20&lt;/creditScoreDate&gt;\r\n&quot; + 
					&quot;            &lt;userClass&gt;DOUBLE-PLATNUM&lt;/userClass&gt;\r\n&quot; + 
					&quot;            &lt;credentials&gt;\r\n&quot; + 
					&quot;                &lt;profileName&gt;arnatest1&quot;+(i+1)+&quot;&lt;/profileName&gt;\r\n&quot; + 
					&quot;                &lt;password&gt;P@ssw0rd1&lt;/password&gt;\r\n&quot; + 
					&quot;                &lt;secretQuestion1&gt;1Where do you work?&lt;/secretQuestion1&gt;\r\n&quot; + 
					&quot;                &lt;secretAnswer1&gt;LodoSoftware&lt;/secretAnswer1&gt;\r\n&quot; + 
					&quot;                &lt;secretQuestion2&gt;What do you like?&lt;/secretQuestion2&gt;\r\n&quot; + 
					&quot;                &lt;secretAnswer2&gt;Flower&lt;/secretAnswer2&gt;\r\n&quot; + 
					&quot;                &lt;secretQuestion3&gt;What color is your favorite?&lt;/secretQuestion3&gt;\r\n&quot; + 
					&quot;                &lt;secretAnswer3&gt;blue&lt;/secretAnswer3&gt;\r\n&quot; + 
					&quot;            &lt;/credentials&gt;\r\n&quot; + 
					&quot;            &lt;person&gt;\r\n&quot; + 
					&quot;                &lt;firstName&gt;Arna&lt;/firstName&gt;\r\n&quot; + 
					&quot;                &lt;middleName&gt;middleName&lt;/middleName&gt;\r\n&quot; + 
					&quot;                &lt;lastName&gt;Badyelkhan&lt;/lastName&gt;\r\n&quot; + 
					&quot;                &lt;primaryEmail&gt;abadyelkhan@lodosoftware.com&lt;/primaryEmail&gt;\r\n&quot; + 
					&quot;                &lt;homePhone&gt;304-304-2460&lt;/homePhone&gt;\r\n&quot; + 
					&quot;                &lt;employee&gt;false&lt;/employee&gt;\r\n&quot; + 
					&quot;                &lt;alternateEmail&gt;alternateEmail@lodosoftware.com&lt;/alternateEmail&gt;\r\n&quot; + 
					&quot;                &lt;workPhone&gt;720-456-8585&lt;/workPhone&gt;\r\n&quot; + 
					&quot;                &lt;mobilePhone&gt;3034567845&lt;/mobilePhone&gt;\r\n&quot; + 
					&quot;                &lt;physicalAddress&gt;\r\n&quot; + 
					&quot;                    &lt;address1&gt;9568 Missouri Ave&lt;/address1&gt;\r\n&quot; + 
					&quot;                    &lt;address2&gt;9568 Missouri Ave&lt;/address2&gt;\r\n&quot; + 
					&quot;                    &lt;address3&gt;9568 Missouri Ave&lt;/address3&gt;\r\n&quot; + 
					&quot;                    &lt;address4&gt;9568 Missouri Ave&lt;/address4&gt;\r\n&quot; + 
					&quot;                    &lt;city&gt;LOWELL&lt;/city&gt;\r\n&quot; + 
					&quot;                    &lt;state&gt;AR&lt;/state&gt;\r\n&quot; + 
					&quot;                    &lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
					&quot;                    &lt;postalCode&gt;72745-9551&lt;/postalCode&gt;\r\n&quot; + 
					&quot;                &lt;/physicalAddress&gt;\r\n&quot; + 
					&quot;                &lt;mailingAddress&gt;\r\n&quot; + 
					&quot;					&lt;address1&gt;111 Any Street&lt;/address1&gt;\r\n&quot; + 
					&quot;					&lt;address2&gt;Suite 101&lt;/address2&gt;\r\n&quot; + 
					&quot;					 &lt;address3&gt;address3 line&lt;/address3&gt;\r\n&quot; + 
					&quot;					&lt;address4&gt;address4 line&lt;/address4&gt;\r\n&quot; + 
					&quot;					&lt;city&gt;AnyTown&lt;/city&gt;\r\n&quot; + 
					&quot;					&lt;state&gt;CO&lt;/state&gt;\r\n&quot; + 
					&quot;					&lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
					&quot;					&lt;postalCode&gt;80000&lt;/postalCode&gt;\r\n&quot; + 
					&quot;				&lt;/mailingAddress&gt;\r\n&quot; + 
					&quot;            &lt;/person&gt;\r\n&quot; + 
					&quot;            &lt;userAccountList&gt;\r\n&quot; + userAccountAssociate + 
					&quot;\r\n            &lt;/userAccountList&gt;\r\n&quot; + 
					&quot;        &lt;/user&gt;\r\n&quot;);
		}
		bw2.write(&quot; &lt;/userList&gt;\r\n&quot; + 
				&quot;    &lt;accountList&gt;\r\n&quot;);
		
		k = 0;
		for (int i = 0; i&lt; numOfAccountToCreate; i++)
		{
			String transactions = &quot;&quot;;
			for (int j = 0; j&lt; (numOfTransaction/numOfAccountToCreate); j++)
			{
				transactions =   transactions + &quot;\r\n&quot; + 
&quot;                &lt;transaction directId=\&quot;PerfUserTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
								&quot;                   &lt;amount&gt;20.14&lt;/amount&gt;\r\n&quot; + 
								&quot;                   &lt;name&gt;TestTransactionName&lt;/name&gt;\r\n&quot; + 
								&quot;                   &lt;postDate&gt;2012-05-29&lt;/postDate&gt;\r\n&quot; + 
								&quot;                   &lt;type&gt;0&lt;/type&gt;\r\n&quot; + 
								&quot;                   &lt;pending&gt;false&lt;/pending&gt;\r\n&quot; + 
								&quot;                   &lt;memo&gt;This is test!&lt;/memo&gt;\r\n&quot; + 
								&quot;                   &lt;mcc&gt;5599&lt;/mcc&gt;\r\n&quot; + 
								&quot;                   &lt;principalAmount&gt;1.00&lt;/principalAmount&gt;\r\n&quot; + 
								&quot;					&lt;interestAmount&gt;1.00&lt;/interestAmount&gt;\r\n&quot; + 
								&quot;					&lt;otherAmount&gt;2.00&lt;/otherAmount&gt;\r\n&quot; + 
								&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
								&quot;					&lt;runningBalance&gt;9.99&lt;/runningBalance&gt;\r\n&quot; + 
								&quot;					&lt;originationDate&gt;2012-04-21&lt;/originationDate&gt;\r\n&quot; + 
								&quot;					&lt;tranCode&gt;99&lt;/tranCode&gt;\r\n&quot; + 
								&quot;					&lt;checkNum&gt;999&lt;/checkNum&gt;\r\n&quot; + 
								&quot;					&lt;imageId&gt;1&lt;/imageId&gt;\r\n&quot; + 
								&quot;					&lt;postingSeq&gt;0000001&lt;/postingSeq&gt;                  \r\n&quot; + 
								&quot;                &lt;/transaction&gt;&quot;;
				k = k + 1;
			}
			if (numOfAccountToCreate == (i+1))
			{
				for (int j = 0; j&lt; (numOfTransaction-numOfAccountToCreate*(numOfTransaction/numOfAccountToCreate)); j++)
				{
					transactions = transactions + &quot;\r\n&quot;+
									&quot;                &lt;transaction directId=\&quot;PerfUserTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
									&quot;                   &lt;amount&gt;20.14&lt;/amount&gt;\r\n&quot; + 
									&quot;                   &lt;name&gt;TestTransactionName&lt;/name&gt;\r\n&quot; + 
									&quot;                   &lt;postDate&gt;2012-05-29&lt;/postDate&gt;\r\n&quot; + 
									&quot;                   &lt;type&gt;0&lt;/type&gt;\r\n&quot; + 
									&quot;                   &lt;pending&gt;false&lt;/pending&gt;\r\n&quot; + 
									&quot;                   &lt;memo&gt;This is test!&lt;/memo&gt;\r\n&quot; + 
									&quot;                   &lt;mcc&gt;5599&lt;/mcc&gt;\r\n&quot; + 
									&quot;                   &lt;principalAmount&gt;1.00&lt;/principalAmount&gt;\r\n&quot; + 
									&quot;					&lt;interestAmount&gt;1.00&lt;/interestAmount&gt;\r\n&quot; + 
									&quot;					&lt;otherAmount&gt;2.00&lt;/otherAmount&gt;\r\n&quot; + 
									&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
									&quot;					&lt;runningBalance&gt;9.99&lt;/runningBalance&gt;\r\n&quot; + 
									&quot;					&lt;originationDate&gt;2012-04-21&lt;/originationDate&gt;\r\n&quot; + 
									&quot;					&lt;tranCode&gt;99&lt;/tranCode&gt;\r\n&quot; + 
									&quot;					&lt;checkNum&gt;999&lt;/checkNum&gt;\r\n&quot; + 
									&quot;					&lt;imageId&gt;1&lt;/imageId&gt;\r\n&quot; + 
									&quot;					&lt;postingSeq&gt;0000001&lt;/postingSeq&gt;                  \r\n&quot; + 
									&quot;                &lt;/transaction&gt;&quot;;
					k = k + 1;
				}
			}
			
			bw2.write(&quot;        &lt;account directId=\&quot;accountDirectID&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;           &lt;branchExternalId&gt;CreateBranchPerfTest-1&lt;/branchExternalId&gt;\r\n&quot; + 
					&quot;			&lt;accountProductExternalId&gt;DEFAULT_COMPANY_CHECKING&lt;/accountProductExternalId&gt;\r\n&quot; + 
					&quot;			&lt;routingTransitNumber&gt;ROUNTNUM&lt;/routingTransitNumber&gt;\r\n&quot; + 
					&quot;			&lt;accountName&gt;ConduitPerfTestAccName&lt;/accountName&gt;\r\n&quot; + 
					&quot;			&lt;accountNumber&gt;4321&lt;/accountNumber&gt;\r\n&quot; + 
					&quot;			&lt;accountType&gt;accounttype.creditcard&lt;/accountType&gt;\r\n&quot; + 
					&quot;			&lt;accountClass&gt;accountclass.creditcard&lt;/accountClass&gt;\r\n&quot; + 
					&quot;			&lt;balance&gt;4000.00&lt;/balance&gt;\r\n&quot; + 
					&quot;			&lt;accountStatus&gt;accountstatus.open&lt;/accountStatus&gt;\r\n&quot; + 
					&quot;			&lt;rateOfReturn&gt;1.00&lt;/rateOfReturn&gt;\r\n&quot; + 
					&quot;			&lt;availableBalance&gt;3900.99&lt;/availableBalance&gt;\r\n&quot; + 
					&quot;			&lt;creditLimit&gt;5000.00&lt;/creditLimit&gt;\r\n&quot; + 
					&quot;			&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
					&quot;			&lt;availableCredit&gt;3000.00&lt;/availableCredit&gt;\r\n&quot; + 
					&quot;			&lt;cashAdvanceLimit&gt;500.00&lt;/cashAdvanceLimit&gt;\r\n&quot; + 
					&quot;			&lt;availableCashLimit&gt;2999.89&lt;/availableCashLimit&gt;\r\n&quot; + 
					&quot;			&lt;minimumPaymentDue&gt;50.00&lt;/minimumPaymentDue&gt;\r\n&quot; + 
					&quot;			&lt;paymentDueDate&gt;2012-05-02&lt;/paymentDueDate&gt;\r\n&quot; + 
					&quot;			&lt;interestRate&gt;9.99&lt;/interestRate&gt;\r\n&quot; + 
					&quot;			&lt;maturityDate&gt;2012-11-20&lt;/maturityDate&gt;\r\n&quot; + 
					&quot;			&lt;previousAmountDue&gt;60.00&lt;/previousAmountDue&gt;\r\n&quot; + 
					&quot;			&lt;pastAmountDue&gt;0.00&lt;/pastAmountDue&gt;\r\n&quot; + 
					&quot;			&lt;financeCharges&gt;20.00&lt;/financeCharges&gt;\r\n&quot; + 
					&quot;			&lt;restricted&gt;false&lt;/restricted&gt;\r\n&quot; + 
					&quot;			&lt;estatements&gt;true&lt;/estatements&gt;\r\n&quot; + 
					&quot;			&lt;holdAmount&gt;1.23&lt;/holdAmount&gt;\r\n&quot; + 
					&quot;			&lt;accountOpenDate&gt;2011-05-20&lt;/accountOpenDate&gt;\r\n&quot; + 
					&quot;			&lt;accountClosedDate&gt;2012-03-20&lt;/accountClosedDate&gt;\r\n&quot; + 
					&quot;			&lt;aggregationStatus&gt;aggstatus.success&lt;/aggregationStatus&gt;\r\n&quot; + 
					&quot;			&lt;lastDepositAmount&gt;4000.00&lt;/lastDepositAmount&gt;\r\n&quot; + 
					&quot;			&lt;lastDepositDate&gt;2012-04-13&lt;/lastDepositDate&gt;\r\n&quot; + 
					&quot;			&lt;lastPaymentDate&gt;2012-04-02&lt;/lastPaymentDate&gt;\r\n&quot; + 
					&quot;			&lt;lastPaymentAmount&gt;457.85&lt;/lastPaymentAmount&gt;\r\n&quot; + 
					&quot;			&lt;loanDate&gt;2011-06-20&lt;/loanDate&gt;\r\n&quot; + 
					&quot;			&lt;rewardsBalance&gt;20000.00&lt;/rewardsBalance&gt;\r\n&quot; + 
					&quot;			&lt;pointsAccrued&gt;1000.00&lt;/pointsAccrued&gt;\r\n&quot; + 
					&quot;			&lt;pointsRedeemed&gt;500.50&lt;/pointsRedeemed&gt;\r\n&quot; + 
					&quot;			&lt;lastStatementDate&gt;2012-07-16&lt;/lastStatementDate&gt;			\r\n&quot; + 
					&quot;			&lt;apr&gt;10.00&lt;/apr&gt;\r\n&quot; + 
					&quot;			&lt;originationDate&gt;2013-01-01&lt;/originationDate&gt;\r\n&quot; + 
					&quot;            &lt;transactionList&gt;\r\n&quot; + transactions+
					&quot;\r\n            &lt;/transactionList&gt;\r\n&quot; + 
					&quot;        &lt;/account&gt;\r\n&quot;);
		}
		bw2.write(&quot;&lt;/accountList&gt;\r\n&quot; + 
				&quot;&lt;/conduitUserRequest&gt;\r\n&quot;);
		bw2.close();

File dest = new File(&quot;${conduitFileDropPath}&quot;);
FileUtils.copyFileToDirectory(tempDest2, dest);

tempDest2.delete();
tempDest1.delete();
   </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitCreateUserFileConduitProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select count(*) as total from [${dbName}].[dbo]. [OLB_TRANSACTION] as t1,  [${dbName}].[dbo].[USER_TRANSACTION_JOIN] as t2, [${dbName}].[dbo].[SPLIT_CATEGORIZATION] as t3 
where t1.ID=t2.TRANSACTION_ID and t2.id=t3.USER_TRANSACTION_JOIN_ID and t1.NAME = &apos;TestTransactionName&apos;) =?)
BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter




</stringProp>
            <stringProp name="queryArguments">${__V(${numOfTransaction})}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">totalTnx</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateCreatedUserAccountTransaction" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT 

(&apos;TOTAL USER: &apos; +
(SELECT convert(varchar, (SELECT  count(*)  from ${dbName}.[dbo].[OLB_USER]  where DIRECT_ID LIKE &apos;TestUserDirectID%&apos;)))
+ &apos; TOTAL ACCOUNT: &apos; +
(SELECT convert(varchar, (SELECT count(*)  from ${dbName}.[dbo].[OLB_ACCOUNT]  where ACCOUNT_NAME LIKE &apos;ConduitPerfTestAccName%&apos;)))
+ &apos; TOTAL TRANSACTION: &apos; +
(SELECT convert(varchar, ((SELECT  count(*)  from ${dbName}.[dbo].[OLB_TRANSACTION]  where NAME LIKE &apos;TestTransactionName%&apos;))))
+ &apos; TOTAL USER_TRANSACTION_JOINT: &apos; +
(SELECT convert(varchar, (SELECT  count(*) from ${dbName}.[dbo].[OLB_TRANSACTION] t1, ${dbName}.[dbo].[USER_TRANSACTION_JOIN] t2 where t1.ID = t2.TRANSACTION_ID and t1.NAME LIKE &apos;TestTransactionName%&apos;)))
+ &apos; TOTAL SPLIT_CATEGORIZATION: &apos; +
(SELECT convert(varchar, (select count(*) from ${dbName}.[dbo].[OLB_TRANSACTION] t1, ${dbName}.[dbo].[USER_TRANSACTION_JOIN] t2, ${dbName}.[dbo].[SPLIT_CATEGORIZATION] t3 
  where t1.ID = t2.TRANSACTION_ID and t2.ID=t3.USER_TRANSACTION_JOIN_ID and t1.NAME LIKE &apos;TestTransactionName%&apos;)))
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">expectedResult</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateTotalUserAccountTransactionInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="173993114">TOTAL USER: ${numOfUserToCreate} TOTAL ACCOUNT: ${numOfAccountToCreate} TOTAL TRANSACTION: ${numOfTransaction} TOTAL USER_TRANSACTION_JOINT: ${numOfTransaction} TOTAL SPLIT_CATEGORIZATION: ${numOfTransaction}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="UpdateUsersAccountsTransactions" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropUpdateUserConduitFile" enabled="true">
            <stringProp name="BeanShellSampler.query">import org.apache.commons.io.FileUtils;

String tempFolder = &quot;${conduitFileDropPath}temp&quot;;
File tempDest1 = new File(tempFolder);
if (!tempDest1.exists())
{
   tempDest1.mkdirs();
}

String tempPath2 = tempFolder + &quot;\\\\update-user-${__threadNum}.xml&quot;;
File tempDest2 = new File(tempPath2);

int numOfAccountToCreate = ${numOfAccountToCreate}; 
int numOfTransaction = ${numOfTransaction}; 
int numOfUserToCreate = ${numOfUserToCreate};
	    
FileWriter fw2 = new FileWriter(tempDest2.getAbsoluteFile());
BufferedWriter bw2 = new BufferedWriter(fw2);
		
		bw2.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
				&quot;&lt;conduitUserRequest xmlns=\&quot;http://lodosoftware.com/conduit/user\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;\r\n&quot; + 
				&quot;    &lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
				&quot;    &lt;authentication&gt;\r\n&quot; + 
				&quot;        &lt;username&gt;userName&lt;/username&gt;\r\n&quot; + 
				&quot;        &lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
				&quot;    &lt;/authentication&gt;\r\n&quot; + 
				&quot;    &lt;transactionDateRange&gt;\r\n&quot; + 
				&quot;        &lt;beginDate&gt;2012-04-29&lt;/beginDate&gt;\r\n&quot; + 
				&quot;        &lt;endDate&gt;2013-05-30&lt;/endDate&gt;\r\n&quot; + 
				&quot;    &lt;/transactionDateRange&gt;\r\n&quot; + 
				&quot;    &lt;userList&gt;\r\n&quot;);
		
		int k = 0;
		for (int i = 0; i&lt;numOfUserToCreate; i++)
		{
			String userAccountAssociate= &quot;&quot;;
			for (int j = 0; j&lt; (numOfAccountToCreate/numOfUserToCreate); j++)
			{
				userAccountAssociate=   userAccountAssociate + &quot;\r\n&quot; +    
						&quot;                &lt;userAccount action=\&quot;associate\&quot;&gt;\r\n&quot; + 
						&quot;                    &lt;accountDirectId&gt;accountDirectID&quot;+(k+1)+&quot;&lt;/accountDirectId&gt;\r\n&quot; + 
						&quot;                    &lt;nickname&gt;TestUNickName&quot;+(k+1)+&quot;&lt;/nickname&gt;\r\n&quot; + 
						&quot;                    &lt;excluded&gt;true&lt;/excluded&gt;\r\n&quot; + 
						&quot;                    &lt;hidden&gt;true&lt;/hidden&gt;\r\n&quot; + 
						&quot;                    &lt;hideByAdmin&gt;true&lt;/hideByAdmin&gt;\r\n&quot; + 
						&quot;                    &lt;displayOrder&gt;12&lt;/displayOrder&gt;\r\n&quot; + 
						&quot;                &lt;/userAccount&gt;&quot;;
				k = k+1;
			}
			if (numOfUserToCreate == (i+1))
			{
				for (int j = 0; j&lt; (numOfAccountToCreate-numOfUserToCreate*(numOfAccountToCreate/numOfUserToCreate)); j++)
				{
					userAccountAssociate=   userAccountAssociate + &quot;\r\n&quot; + 
							&quot;                &lt;userAccount action=\&quot;associate\&quot;&gt;\r\n&quot; + 
							&quot;                    &lt;accountDirectId&gt;accountDirectID&quot;+(k+1)+&quot;&lt;/accountDirectId&gt;\r\n&quot; + 
							&quot;                    &lt;nickname&gt;TestUNickName&quot;+(k+1)+&quot;&lt;/nickname&gt;\r\n&quot; + 
							&quot;                    &lt;excluded&gt;true&lt;/excluded&gt;\r\n&quot; + 
							&quot;                    &lt;hidden&gt;true&lt;/hidden&gt;\r\n&quot; + 
							&quot;                    &lt;hideByAdmin&gt;true&lt;/hideByAdmin&gt;\r\n&quot; + 
							&quot;                    &lt;displayOrder&gt;34&lt;/displayOrder&gt;\r\n&quot; + 
							&quot;                &lt;/userAccount&gt;&quot;;
					k = k+1;
				}
			}
			bw2.write(&quot;        &lt;user directId=\&quot;TestUserDirectID&quot;+(i+1)+&quot;\&quot; directId2=\&quot;TestuserDirectID2&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;            &lt;loginId&gt;UpdatedTestUL&quot;+(i+1)+&quot;&lt;/loginId&gt;\r\n&quot; + 
					&quot;            &lt;branchExternalId&gt;CreateBranchPerfTest-1&lt;/branchExternalId&gt;\r\n&quot; + 
					&quot;            &lt;interfaceId&gt;45&lt;/interfaceId&gt;\r\n&quot; + 
					&quot;            &lt;taxId&gt;304-26-27860&lt;/taxId&gt;\r\n&quot; + 
					&quot;            &lt;taxIdType&gt;SSN&lt;/taxIdType&gt;\r\n&quot; + 
					&quot;            &lt;locked&gt;true&lt;/locked&gt;\r\n&quot; + 
					&quot;            &lt;userEnabled&gt;true&lt;/userEnabled&gt;\r\n&quot; + 
					&quot;            &lt;emailOptOut&gt;true&lt;/emailOptOut&gt;\r\n&quot; + 
					&quot;            &lt;dateOfBirth&gt;1981-08-24&lt;/dateOfBirth&gt;\r\n&quot; + 
					&quot;            &lt;gender&gt;M&lt;/gender&gt;\r\n&quot; + 
					&quot;            &lt;billpaySubscriberId&gt;31692460304&lt;/billpaySubscriberId&gt;\r\n&quot; + 
					&quot;            &lt;billpayStatus&gt;billpayStatus.active&lt;/billpayStatus&gt;\r\n&quot; + 
					&quot;            &lt;mobile&gt;true&lt;/mobile&gt;\r\n&quot; + 
					&quot;            &lt;creditScore&gt;780&lt;/creditScore&gt;\r\n&quot; + 
					&quot;            &lt;creditScoreDate&gt;2012-05-20&lt;/creditScoreDate&gt;\r\n&quot; + 
					&quot;            &lt;userClass&gt;DOUBLE-PLATNUM&lt;/userClass&gt;\r\n&quot; + 
					&quot;            &lt;credentials&gt;\r\n&quot; + 
					&quot;                &lt;profileName&gt;arnatest&quot;+(i+1)+&quot;&lt;/profileName&gt;\r\n&quot; + 
					&quot;                &lt;password&gt;P@ssw0rd2&lt;/password&gt;\r\n&quot; + 
					&quot;                &lt;secretQuestion1&gt;Where do you work?&lt;/secretQuestion1&gt;\r\n&quot; + 
					&quot;                &lt;secretAnswer1&gt;Lodo Software&lt;/secretAnswer1&gt;\r\n&quot; + 
					&quot;                &lt;secretQuestion2&gt;Whaat do you like?&lt;/secretQuestion2&gt;\r\n&quot; + 
					&quot;                &lt;secretAnswer2&gt;Flowers&lt;/secretAnswer2&gt;\r\n&quot; + 
					&quot;                &lt;secretQuestion3&gt;Whata color is your favorite?&lt;/secretQuestion3&gt;\r\n&quot; + 
					&quot;                &lt;secretAnswer3&gt;red&lt;/secretAnswer3&gt;\r\n&quot; + 
					&quot;            &lt;/credentials&gt;\r\n&quot; + 
					&quot;            &lt;person&gt;\r\n&quot; + 
					&quot;                &lt;firstName&gt;Arnau&lt;/firstName&gt;\r\n&quot; + 
					&quot;                &lt;middleName&gt;middleuName&lt;/middleName&gt;\r\n&quot; + 
					&quot;                &lt;lastName&gt;Badyelkhanu&lt;/lastName&gt;\r\n&quot; + 
					&quot;                &lt;primaryEmail&gt;abadyelkhanu@lodosoftware.com&lt;/primaryEmail&gt;\r\n&quot; + 
					&quot;                &lt;homePhone&gt;304-304-2760&lt;/homePhone&gt;\r\n&quot; + 
					&quot;                &lt;employee&gt;true&lt;/employee&gt;\r\n&quot; + 
					&quot;                &lt;alternateEmail&gt;alternateEmailu@lodosoftware.com&lt;/alternateEmail&gt;\r\n&quot; + 
					&quot;                &lt;workPhone&gt;720-456-8589&lt;/workPhone&gt;\r\n&quot; + 
					&quot;                &lt;mobilePhone&gt;3034567245&lt;/mobilePhone&gt;\r\n&quot; + 
					&quot;                &lt;physicalAddress&gt;\r\n&quot; + 
					&quot;                    &lt;address1&gt;95681 Missouri Ave&lt;/address1&gt;\r\n&quot; + 
					&quot;                    &lt;address2&gt;9568 1Missouri Ave&lt;/address2&gt;\r\n&quot; + 
					&quot;                    &lt;address3&gt;9568 1Missouri Ave&lt;/address3&gt;\r\n&quot; + 
					&quot;                    &lt;address4&gt;95681 Missouri Ave&lt;/address4&gt;\r\n&quot; + 
					&quot;                    &lt;city&gt;LOWELL&lt;/city&gt;\r\n&quot; + 
					&quot;                    &lt;state&gt;AR&lt;/state&gt;\r\n&quot; + 
					&quot;                    &lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
					&quot;                    &lt;postalCode&gt;72745-9551&lt;/postalCode&gt;\r\n&quot; + 
					&quot;                &lt;/physicalAddress&gt;\r\n&quot; + 
					&quot;                &lt;mailingAddress&gt;\r\n&quot; + 
					&quot;					&lt;address1&gt;111 Any Street&lt;/address1&gt;\r\n&quot; + 
					&quot;					&lt;address2&gt;Suite 101&lt;/address2&gt;\r\n&quot; + 
					&quot;					 &lt;address3&gt;address3 line&lt;/address3&gt;\r\n&quot; + 
					&quot;					&lt;address4&gt;address4 line&lt;/address4&gt;\r\n&quot; + 
					&quot;					&lt;city&gt;AnyTown&lt;/city&gt;\r\n&quot; + 
					&quot;					&lt;state&gt;CO&lt;/state&gt;\r\n&quot; + 
					&quot;					&lt;countryCode&gt;US&lt;/countryCode&gt;\r\n&quot; + 
					&quot;					&lt;postalCode&gt;80000&lt;/postalCode&gt;\r\n&quot; + 
					&quot;				&lt;/mailingAddress&gt;\r\n&quot; + 
					&quot;            &lt;/person&gt;\r\n&quot; + 
					&quot;            &lt;userAccountList&gt;\r\n&quot; + userAccountAssociate + 
					&quot;\r\n            &lt;/userAccountList&gt;\r\n&quot; + 
					&quot;        &lt;/user&gt;\r\n&quot;);
		}
		bw2.write(&quot; &lt;/userList&gt;\r\n&quot; + 
				&quot;    &lt;accountList&gt;\r\n&quot;);
		
		k = 0;
		for (int i = 0; i&lt; numOfAccountToCreate; i++)
		{
			String transactions = &quot;&quot;;
			for (int j = 0; j&lt; (numOfTransaction/numOfAccountToCreate); j++)
			{
				transactions = transactions + &quot;\r\n&quot; + 
 &quot;                &lt;transaction directId=\&quot;PerfUserTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
								&quot;                   &lt;amount&gt;47.14&lt;/amount&gt;\r\n&quot; + 
								&quot;                   &lt;name&gt;UpdatedTestTransactionName&lt;/name&gt;\r\n&quot; + 
								&quot;                   &lt;postDate&gt;2012-04-29&lt;/postDate&gt;\r\n&quot; + 
								&quot;                   &lt;type&gt;1&lt;/type&gt;\r\n&quot; + 
								&quot;                   &lt;pending&gt;true&lt;/pending&gt;\r\n&quot; + 
								&quot;                   &lt;memo&gt;This is update test!&lt;/memo&gt;\r\n&quot; + 
								&quot;                   &lt;mcc&gt;425&lt;/mcc&gt;\r\n&quot; + 
								&quot;                   &lt;principalAmount&gt;11.00&lt;/principalAmount&gt;\r\n&quot; + 
								&quot;					&lt;interestAmount&gt;11.00&lt;/interestAmount&gt;\r\n&quot; + 
								&quot;					&lt;otherAmount&gt;21.00&lt;/otherAmount&gt;\r\n&quot; + 
								&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
								&quot;					&lt;runningBalance&gt;91.99&lt;/runningBalance&gt;\r\n&quot; + 
								&quot;					&lt;originationDate&gt;2012-01-21&lt;/originationDate&gt;\r\n&quot; + 
								&quot;					&lt;tranCode&gt;1&lt;/tranCode&gt;\r\n&quot; + 
								&quot;					&lt;checkNum&gt;4&lt;/checkNum&gt;\r\n&quot; + 
								&quot;					&lt;imageId&gt;4&lt;/imageId&gt;\r\n&quot; + 
								&quot;					&lt;postingSeq&gt;44&lt;/postingSeq&gt;                  \r\n&quot; + 
								&quot;                &lt;/transaction&gt;&quot;;
				k = k + 1;
			}
			if (numOfAccountToCreate == (i+1))
			{
				for (int j = 0; j&lt; (numOfTransaction-numOfAccountToCreate*(numOfTransaction/numOfAccountToCreate)); j++)
				{
					transactions = transactions + &quot;\r\n&quot;+
									&quot;                &lt;transaction directId=\&quot;PerfUserTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
									&quot;                   &lt;amount&gt;-20.14&lt;/amount&gt;\r\n&quot; + 
									&quot;                   &lt;name&gt;UpdatedTestTransactionName&lt;/name&gt;\r\n&quot; + 
									&quot;                   &lt;postDate&gt;2012-05-29&lt;/postDate&gt;\r\n&quot; + 
									&quot;                   &lt;type&gt;0&lt;/type&gt;\r\n&quot; + 
									&quot;                   &lt;pending&gt;false&lt;/pending&gt;\r\n&quot; + 
									&quot;                   &lt;memo&gt;This is test!&lt;/memo&gt;\r\n&quot; + 
									&quot;                   &lt;mcc&gt;5599&lt;/mcc&gt;\r\n&quot; + 
									&quot;                   &lt;principalAmount&gt;1.00&lt;/principalAmount&gt;\r\n&quot; + 
									&quot;					&lt;interestAmount&gt;1.00&lt;/interestAmount&gt;\r\n&quot; + 
									&quot;					&lt;otherAmount&gt;2.00&lt;/otherAmount&gt;\r\n&quot; + 
									&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
									&quot;					&lt;runningBalance&gt;9.99&lt;/runningBalance&gt;\r\n&quot; + 
									&quot;					&lt;originationDate&gt;2012-04-21&lt;/originationDate&gt;\r\n&quot; + 
									&quot;					&lt;tranCode&gt;99&lt;/tranCode&gt;\r\n&quot; + 
									&quot;					&lt;checkNum&gt;999&lt;/checkNum&gt;\r\n&quot; + 
									&quot;					&lt;imageId&gt;1&lt;/imageId&gt;\r\n&quot; + 
									&quot;					&lt;postingSeq&gt;0000001&lt;/postingSeq&gt;                  \r\n&quot; + 
									&quot;                &lt;/transaction&gt;&quot;;
					k = k + 1;
				}
			}
			
			bw2.write(&quot;        &lt;account directId=\&quot;accountDirectID&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;           &lt;branchExternalId&gt;CreateBranchPerfTest-1&lt;/branchExternalId&gt;\r\n&quot; + 
					&quot;			&lt;accountProductExternalId&gt;DEFAULT_COMPANY_CHECKING&lt;/accountProductExternalId&gt;\r\n&quot; + 
					&quot;			&lt;routingTransitNumber&gt;ROUNTNUM&lt;/routingTransitNumber&gt;\r\n&quot; + 
					&quot;			&lt;accountName&gt;PerfUpdateTestAccName&lt;/accountName&gt;\r\n&quot; + 
					&quot;			&lt;accountNumber&gt;4321&lt;/accountNumber&gt;\r\n&quot; + 
					&quot;			&lt;accountType&gt;accounttype.creditcard&lt;/accountType&gt;\r\n&quot; + 
					&quot;			&lt;accountClass&gt;accountclass.creditcard&lt;/accountClass&gt;\r\n&quot; + 
					&quot;			&lt;balance&gt;4000.00&lt;/balance&gt;\r\n&quot; + 
					&quot;			&lt;accountStatus&gt;accountstatus.open&lt;/accountStatus&gt;\r\n&quot; + 
					&quot;			&lt;rateOfReturn&gt;1.00&lt;/rateOfReturn&gt;\r\n&quot; + 
					&quot;			&lt;availableBalance&gt;390.99&lt;/availableBalance&gt;\r\n&quot; + 
					&quot;			&lt;creditLimit&gt;50001.00&lt;/creditLimit&gt;\r\n&quot; + 
					&quot;			&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
					&quot;			&lt;availableCredit&gt;30010.00&lt;/availableCredit&gt;\r\n&quot; + 
					&quot;			&lt;cashAdvanceLimit&gt;5010.00&lt;/cashAdvanceLimit&gt;\r\n&quot; + 
					&quot;			&lt;availableCashLimit&gt;29199.89&lt;/availableCashLimit&gt;\r\n&quot; + 
					&quot;			&lt;minimumPaymentDue&gt;50.00&lt;/minimumPaymentDue&gt;\r\n&quot; + 
					&quot;			&lt;paymentDueDate&gt;2012-05-02&lt;/paymentDueDate&gt;\r\n&quot; + 
					&quot;			&lt;interestRate&gt;9.99&lt;/interestRate&gt;\r\n&quot; + 
					&quot;			&lt;maturityDate&gt;2012-11-20&lt;/maturityDate&gt;\r\n&quot; + 
					&quot;			&lt;previousAmountDue&gt;60.00&lt;/previousAmountDue&gt;\r\n&quot; + 
					&quot;			&lt;pastAmountDue&gt;0.00&lt;/pastAmountDue&gt;\r\n&quot; + 
					&quot;			&lt;financeCharges&gt;20.00&lt;/financeCharges&gt;\r\n&quot; + 
					&quot;			&lt;restricted&gt;false&lt;/restricted&gt;\r\n&quot; + 
					&quot;			&lt;estatements&gt;true&lt;/estatements&gt;\r\n&quot; + 
					&quot;			&lt;holdAmount&gt;1.23&lt;/holdAmount&gt;\r\n&quot; + 
					&quot;			&lt;accountOpenDate&gt;2011-05-20&lt;/accountOpenDate&gt;\r\n&quot; + 
					&quot;			&lt;accountClosedDate&gt;2012-03-20&lt;/accountClosedDate&gt;\r\n&quot; + 
					&quot;			&lt;aggregationStatus&gt;aggstatus.success&lt;/aggregationStatus&gt;\r\n&quot; + 
					&quot;			&lt;lastDepositAmount&gt;4000.00&lt;/lastDepositAmount&gt;\r\n&quot; + 
					&quot;			&lt;lastDepositDate&gt;2012-04-13&lt;/lastDepositDate&gt;\r\n&quot; + 
					&quot;			&lt;lastPaymentDate&gt;2012-04-02&lt;/lastPaymentDate&gt;\r\n&quot; + 
					&quot;			&lt;lastPaymentAmount&gt;457.85&lt;/lastPaymentAmount&gt;\r\n&quot; + 
					&quot;			&lt;loanDate&gt;2011-06-20&lt;/loanDate&gt;\r\n&quot; + 
					&quot;			&lt;rewardsBalance&gt;20000.00&lt;/rewardsBalance&gt;\r\n&quot; + 
					&quot;			&lt;pointsAccrued&gt;1000.00&lt;/pointsAccrued&gt;\r\n&quot; + 
					&quot;			&lt;pointsRedeemed&gt;500.50&lt;/pointsRedeemed&gt;\r\n&quot; + 
					&quot;			&lt;lastStatementDate&gt;2012-07-16&lt;/lastStatementDate&gt;			\r\n&quot; + 
					&quot;			&lt;apr&gt;10.00&lt;/apr&gt;\r\n&quot; + 
					&quot;			&lt;originationDate&gt;2013-01-01&lt;/originationDate&gt;\r\n&quot; + 
					&quot;            &lt;transactionList&gt;\r\n&quot; + transactions+
					&quot;\r\n            &lt;/transactionList&gt;\r\n&quot; + 
					&quot;        &lt;/account&gt;\r\n&quot;);
		}
		bw2.write(&quot;&lt;/accountList&gt;\r\n&quot; + 
				&quot;&lt;/conduitUserRequest&gt;\r\n&quot;);
		bw2.close();

File dest = new File(&quot;${conduitFileDropPath}&quot;);
FileUtils.copyFileToDirectory(tempDest2, dest);

tempDest2.delete();
tempDest1.delete();
   </stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitUpdateUserFileConduitProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select count(*) as total from  [${dbName}].[dbo].[OLB_TRANSACTION] as t1,  [${dbName}].[dbo].[USER_TRANSACTION_JOIN] as t2, 
[${dbName}].[dbo].[SPLIT_CATEGORIZATION] as t3, [${dbName}].[dbo].[OLB_USER] as t4 
where t1.ID=t2.TRANSACTION_ID and t2.id=t3.USER_TRANSACTION_JOIN_ID and t2.USER_ID=t4.USER_ID and t4.LOGIN_ID LIKE &apos;UpdatedTestUL%&apos; and
t1.NAME = &apos;UpdatedTestTransactionName&apos;) =?)

BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter




</stringProp>
            <stringProp name="queryArguments">${__V(${numOfTransaction})}</stringProp>
            <stringProp name="queryArgumentsTypes">INTEGER</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">totalTnx</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateUpdatedUsersAccountsTransactions" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT 
(&apos;TOTAL UPDATED USER: &apos; +
(SELECT convert(varchar, (SELECT  count(*)  from [${dbName}].[dbo].[OLB_USER]  where LOGIN_ID LIKE &apos;UpdatedTestUL%&apos;)))
+ &apos; TOTAL UPDATED ACCOUNT: &apos; +
(SELECT convert(varchar, (SELECT count(*)  from [${dbName}].[dbo].[OLB_ACCOUNT]  where ACCOUNT_NAME LIKE &apos;PerfUpdateTestAccName%&apos;)))
+ &apos; TOTAL UPDATED TRANSACTION: &apos; +
(SELECT convert(varchar, ((SELECT  count(*)  from [${dbName}].[dbo].[OLB_TRANSACTION]  where NAME LIKE &apos;UpdatedTestTransactionName%&apos;))))
)




</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">totalUpdate</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateUpdateUsersAccountsTransactionsInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1661045756">TOTAL UPDATED USER: ${numOfUserToCreate} TOTAL UPDATED ACCOUNT: ${numOfAccountToCreate} TOTAL UPDATED TRANSACTION: ${numOfTransaction}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="TransferTransactions" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropTransferTransactionsFile" enabled="true">
            <stringProp name="BeanShellSampler.query"> String tempPath2 = &quot;${conduitFileDropPath}transactionTransfer-${__threadNum}.xml&quot;;
File tempDest2 = new File(tempPath2);

	 
		FileWriter fw2 = new FileWriter(tempDest2.getAbsoluteFile());
		BufferedWriter bw2 = new BufferedWriter(fw2);;
		bw2.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
				&quot;&lt;conduitUserRequest xmlns=\&quot;http://lodosoftware.com/conduit/user\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;\r\n&quot; + 
				&quot;    &lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
				&quot;    &lt;authentication&gt;\r\n&quot; + 
				&quot;        &lt;username&gt;userName&lt;/username&gt;\r\n&quot; + 
				&quot;        &lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
				&quot;    &lt;/authentication&gt;\r\n&quot; + 
				&quot;    &lt;transactionDateRange&gt;\r\n&quot; + 
				&quot;        &lt;beginDate&gt;2012-05-29&lt;/beginDate&gt;\r\n&quot; + 
				&quot;        &lt;endDate&gt;2012-05-29&lt;/endDate&gt;\r\n&quot; + 
				&quot;    &lt;/transactionDateRange&gt;\r\n&quot; + 
				&quot;    &lt;accountList&gt;\r\n&quot;);
		
		for (int i = 0; i&lt; ${__jexl(${numOfAccountToCreate}-1,)}; i++)
		{
			bw2.write(&quot;        &lt;account directId=\&quot;accountDirectID&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;            &lt;transactionList&gt;\r\n&quot; + 
					&quot;                &lt;transaction directId=\&quot;TrTransferTestTrDirectID&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;                    &lt;amount&gt;20.14&lt;/amount&gt;\r\n&quot; + 
					&quot;                    &lt;name&gt;testTransferTransaction&lt;/name&gt;\r\n&quot; + 
					&quot;                    &lt;postDate&gt;2012-05-29&lt;/postDate&gt;\r\n&quot; + 
					&quot;                    &lt;type&gt;0&lt;/type&gt;\r\n&quot; + 
					&quot;                    &lt;pending&gt;false&lt;/pending&gt;\r\n&quot; + 
					&quot;					&lt;postingSeq&gt;0000001&lt;/postingSeq&gt;  \r\n&quot; + 
					&quot;					&lt;transfer toAccountDirectId=\&quot;accountDirectID&quot;+${numOfAccountToCreate}+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;						&lt;toAccountName&gt;toAccountName&lt;/toAccountName&gt;\r\n&quot; + 
					&quot;						&lt;toAccountRoutingTransitNumber&gt;100&lt;/toAccountRoutingTransitNumber&gt;\r\n&quot; + 
					&quot;						&lt;toAccountNumber&gt;1234 1234 1234 1234&lt;/toAccountNumber&gt;\r\n&quot; + 
					&quot;						&lt;toAccountType&gt;accounttype.creditcard&lt;/toAccountType&gt;\r\n&quot; + 
					&quot;						&lt;frequency&gt;tx.frequency.weekly&lt;/frequency&gt;\r\n&quot; + 
					&quot;						&lt;startDate&gt;2012-04-15&lt;/startDate&gt;\r\n&quot; + 
					&quot;						&lt;endDate&gt;2012-04-20&lt;/endDate&gt;\r\n&quot; + 
					&quot;					&lt;/transfer&gt;		                \r\n&quot; + 
					&quot;                &lt;/transaction&gt;\r\n&quot; + 
					&quot;            &lt;/transactionList&gt;\r\n&quot; + 
					&quot;        &lt;/account&gt;&quot;);
		}
		bw2.write(&quot;&lt;/accountList&gt;\r\n&quot; + 
				&quot;&lt;/conduitUserRequest&gt;\r\n&quot;);
		bw2.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitTransferTransactionsProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select count(*) FROM [${dbName}].[dbo].[OLB_TRANSACTION] where NAME like &apos;testTransferTransaction&apos;) &gt; 0)
BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter



</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">externalID</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateTransferTransactions" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT CAST(
CASE 
    WHEN (SELECT count(*)  from [${dbName}].[dbo].[TRANSFER]  where TO_ACCOUNT_NAME LIKE &apos;toAccountName&apos;) =${__jexl( ${numOfAccountToCreate}-1,)}
    THEN (SELECT CAST(
		CASE 
		WHEN (SELECT  count(*)  from [${dbName}].[dbo].[OLB_TRANSACTION]  where NAME LIKE &apos;testTransferTransaction%&apos;) = ${__jexl( ${numOfAccountToCreate}-1,)}
		THEN (SELECT CAST(
			CASE 
				WHEN (SELECT  count(*) from [${dbName}].[dbo].[OLB_TRANSACTION] t1, [${dbName}].[dbo].[USER_TRANSACTION_JOIN] t2 
				where t1.ID = t2.TRANSACTION_ID and t1.NAME LIKE &apos;testTransferTransaction%&apos;) = $${__jexl( ${numOfAccountToCreate}-1,)}
				THEN (SELECT CAST(
					CASE 
						WHEN (select count(*) from [${dbName}].[dbo].[OLB_TRANSACTION] t1, [${dbName}].[dbo].[USER_TRANSACTION_JOIN] t2, [${dbName}].[dbo].[SPLIT_CATEGORIZATION] t3 
						where t1.ID = t2.TRANSACTION_ID and t2.ID=t3.USER_TRANSACTION_JOIN_ID and t1.NAME LIKE &apos;testTransferTransaction%&apos;) =${__jexl( ${numOfAccountToCreate}-1,)}
							THEN &apos;Y&apos;
						ELSE &apos;check SPLIT_CATEGORIZATION&apos; 
					END as nvarchar))																  
			ELSE &apos;check USER_TRANSACTION_JOIN&apos; 
			END as nvarchar))
		ELSE &apos;Total transfer tr not right&apos; 
		END as nvarchar))
ELSE &apos;Total toAccount is not right&apos; 
END as nvarchar) as fileProcessSucceed



		</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">totalUpdate</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateTransferTransactionsInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="89">Y</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateExistingTransactionsNotDeleted" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT 
(&apos;TOTAL UPDATED USER: &apos; +
(SELECT convert(varchar, (SELECT  count(*)  from [${dbName}].[dbo].[OLB_USER]  where LOGIN_ID LIKE &apos;UpdatedTestUserLoginID%&apos;)))
+ &apos; TOTAL UPDATED ACCOUNT: &apos; +
(SELECT convert(varchar, (SELECT count(*)  from [${dbName}].[dbo].[OLB_ACCOUNT]  where ACCOUNT_NAME LIKE &apos;PerfUpdateTestAccName%&apos;)))
+ &apos; TOTAL UPDATED TRANSACTION: &apos; +
(SELECT convert(varchar, ((SELECT  count(*)  from [${dbName}].[dbo].[OLB_TRANSACTION]  where NAME LIKE &apos;UpdatedTestTransactionName%&apos;))))
)




</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">totalUpdate</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateExistingTransactionsNotDeleted" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1661045756">TOTAL UPDATED USER: ${numOfUserToCreate} TOTAL UPDATED ACCOUNT: ${numOfAccountToCreate} TOTAL UPDATED TRANSACTION: ${numOfTransaction}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="MemoPost-CreateTransactions" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropMemoPostCreateConduitFile" enabled="true">
            <stringProp name="BeanShellSampler.query">String tempPath2 = &quot;${conduitFileDropPath}create-memopost-${__threadNum}.xml&quot;;
File tempDest2 = new File(tempPath2);

int numOfAccountToCreate = ${numOfAccountToCreate}; 
int numOfTransaction = ${numOfTransaction}; 

FileWriter fw2 = new FileWriter(tempDest2.getAbsoluteFile());
BufferedWriter bw2 = new BufferedWriter(fw2);;

bw2.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
				&quot;&lt;conduitMemoPostRequest xmlns=\&quot;http://lodosoftware.com/conduit/memo\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;\r\n&quot; + 
				&quot;	&lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
				&quot;	&lt;authentication&gt;\r\n&quot; + 
				&quot;		&lt;username&gt;userName&lt;/username&gt;\r\n&quot; + 
				&quot;		&lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
				&quot;	&lt;/authentication&gt;\r\n&quot; + 
				&quot;	&lt;accountList&gt;\r\n&quot;);
		int k = 0;
		for (int i = 0; i&lt; numOfAccountToCreate; i++)
		{
			String transactions =&quot;&quot;;
			for (int j = 0; j&lt; (numOfTransaction/numOfAccountToCreate); j++)
			{
				transactions = transactions + &quot;\r\n&quot;+
						&quot;                &lt;transaction directId=\&quot;PerfMemoTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
						&quot;                    &lt;amount&gt;-20.14&lt;/amount&gt;\r\n&quot; + 
						&quot;                    &lt;name&gt;PerfTestMemoPostTrName&lt;/name&gt;\r\n&quot; + 
						&quot;                    &lt;postDate&gt;2012-05-29&lt;/postDate&gt;\r\n&quot; + 
						&quot;                    &lt;type&gt;0&lt;/type&gt;\r\n&quot; + 
						&quot;                    &lt;pending&gt;false&lt;/pending&gt;\r\n&quot; + 
						&quot;                    &lt;memo&gt;This is test!&lt;/memo&gt;\r\n&quot; + 
						&quot;                    &lt;mcc&gt;5599&lt;/mcc&gt;\r\n&quot; + 
						&quot;                    &lt;principalAmount&gt;1.00&lt;/principalAmount&gt;\r\n&quot; + 
						&quot;					&lt;interestAmount&gt;1.00&lt;/interestAmount&gt;\r\n&quot; + 
						&quot;					&lt;otherAmount&gt;2.00&lt;/otherAmount&gt;\r\n&quot; + 
						&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
						&quot;					&lt;runningBalance&gt;9.99&lt;/runningBalance&gt;\r\n&quot; + 
						&quot;					&lt;originationDate&gt;2012-04-21&lt;/originationDate&gt;\r\n&quot; + 
						&quot;					&lt;tranCode&gt;99&lt;/tranCode&gt;\r\n&quot; + 
						&quot;					&lt;checkNum&gt;999&lt;/checkNum&gt;\r\n&quot; + 
						&quot;					&lt;imageId&gt;1&lt;/imageId&gt;\r\n&quot; + 
						&quot;					&lt;postingSeq&gt;0000001&lt;/postingSeq&gt;                  \r\n&quot; + 
						&quot;                &lt;/transaction&gt;&quot;;
				k = k + 1;
			}
			if (numOfAccountToCreate == (i+1))
			{
				for (int j = 0; j&lt; (numOfTransaction-numOfAccountToCreate*(numOfTransaction/numOfAccountToCreate)); j++)
				{
					transactions = transactions + &quot;\r\n&quot;+
							&quot;                &lt;transaction directId=\&quot;PerfMemoTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
							&quot;                    &lt;amount&gt;-20.14&lt;/amount&gt;\r\n&quot; + 
							&quot;                    &lt;name&gt;PerfTestMemoPostTrName&lt;/name&gt;\r\n&quot; + 
							&quot;                    &lt;postDate&gt;2012-05-29&lt;/postDate&gt;\r\n&quot; + 
							&quot;                    &lt;type&gt;0&lt;/type&gt;\r\n&quot; + 
							&quot;                    &lt;pending&gt;false&lt;/pending&gt;\r\n&quot; + 
							&quot;                    &lt;memo&gt;This is test!&lt;/memo&gt;\r\n&quot; + 
							&quot;                    &lt;mcc&gt;5599&lt;/mcc&gt;\r\n&quot; + 
							&quot;                    &lt;principalAmount&gt;1.00&lt;/principalAmount&gt;\r\n&quot; + 
							&quot;					&lt;interestAmount&gt;1.00&lt;/interestAmount&gt;\r\n&quot; + 
							&quot;					&lt;otherAmount&gt;2.00&lt;/otherAmount&gt;\r\n&quot; + 
							&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
							&quot;					&lt;runningBalance&gt;9.99&lt;/runningBalance&gt;\r\n&quot; + 
							&quot;					&lt;originationDate&gt;2012-04-21&lt;/originationDate&gt;\r\n&quot; + 
							&quot;					&lt;tranCode&gt;99&lt;/tranCode&gt;\r\n&quot; + 
							&quot;					&lt;checkNum&gt;999&lt;/checkNum&gt;\r\n&quot; + 
							&quot;					&lt;imageId&gt;1&lt;/imageId&gt;\r\n&quot; + 
							&quot;					&lt;postingSeq&gt;0000001&lt;/postingSeq&gt;                  \r\n&quot; + 
							&quot;                &lt;/transaction&gt;&quot;;
					k = k + 1;
				}
			}
			bw2.write(&quot;        &lt;account directId=\&quot;accountDirectID&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
					&quot;           &lt;branchExternalId&gt;CreateBranchPerfTest-1&lt;/branchExternalId&gt;\r\n&quot; +  
					&quot;			&lt;routingTransitNumber&gt;MEMOTEST&lt;/routingTransitNumber&gt;\r\n&quot; +
					&quot;			&lt;accountNumber&gt;4321&lt;/accountNumber&gt;\r\n&quot; + 
					&quot;			&lt;balance&gt;4000.00&lt;/balance&gt;\r\n&quot; + 
					&quot;			&lt;availableBalance&gt;3900.99&lt;/availableBalance&gt;\r\n&quot; + 
					&quot;            &lt;transactionList&gt;\r\n&quot; + transactions+
					&quot;\r\n            &lt;/transactionList&gt;\r\n&quot; + 
					&quot;        &lt;/account&gt;\r\n&quot;);
		}
		bw2.write(&quot;&lt;/accountList&gt; \r\n&quot; + 
				&quot;&lt;/conduitMemoPostRequest&gt;\r\n&quot;);
		bw2.close();

		
		</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitCreateMemoPostFileConduitProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select count(*) FROM [${dbName}].[dbo].[OLB_TRANSACTION] where NAME like &apos;PerfTestMemoPostTrName&apos;) &gt; 0)
BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter



</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">externalID</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateMemoPostCreatedData" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT 

(&apos;TOTAL ACCOUNT: &apos; +
(SELECT convert(varchar, (SELECT count(*)  from ${dbName}.[dbo].[OLB_ACCOUNT]  where [ROUTING_TRANSIT_NUMBER] LIKE &apos;MEMOTEST%&apos;)))
+ &apos; TOTAL TRANSACTION: &apos; +
(SELECT convert(varchar, ((SELECT  count(*)  from ${dbName}.[dbo].[OLB_TRANSACTION]  where NAME LIKE &apos;PerfTestMemoPostTrName%&apos;))))
+ &apos; TOTAL USER_TRANSACTION_JOINT: &apos; +
(SELECT convert(varchar, (SELECT  count(*) from ${dbName}.[dbo].[OLB_TRANSACTION] t1, ${dbName}.[dbo].[USER_TRANSACTION_JOIN] t2 where t1.ID = t2.TRANSACTION_ID and t1.NAME LIKE &apos;PerfTestMemoPostTrName%&apos;)))
+ &apos; TOTAL SPLIT_CATEGORIZATION: &apos; +
(SELECT convert(varchar, (select count(*) from ${dbName}.[dbo].[OLB_TRANSACTION] t1, ${dbName}.[dbo].[USER_TRANSACTION_JOIN] t2, ${dbName}.[dbo].[SPLIT_CATEGORIZATION] t3 
  where t1.ID = t2.TRANSACTION_ID and t2.ID=t3.USER_TRANSACTION_JOIN_ID and t1.NAME LIKE &apos;PerfTestMemoPostTrName%&apos;)))
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">expectedResult</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateMemoPostDataInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2043349000">TOTAL ACCOUNT: ${numOfAccountToCreate} TOTAL TRANSACTION: ${numOfTransaction} TOTAL USER_TRANSACTION_JOINT: ${numOfTransaction} TOTAL SPLIT_CATEGORIZATION: ${numOfTransaction}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="MemoPost-UpdateTransactions" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropMemoPostUpdateConduitFile" enabled="true">
            <stringProp name="BeanShellSampler.query">String tempPath2 = &quot;${conduitFileDropPath}update-memopost-${__threadNum}.xml&quot;;
File tempDest2 = new File(tempPath2);

int numOfAccountToCreate = ${numOfAccountToCreate}; 
int numOfTransaction = ${numOfTransaction}; 

FileWriter fw2 = new FileWriter(tempDest2.getAbsoluteFile());
BufferedWriter bw2 = new BufferedWriter(fw2);;
bw2.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
	&quot;&lt;conduitMemoPostRequest xmlns=\&quot;http://lodosoftware.com/conduit/memo\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;\r\n&quot; + 
	&quot;	&lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
	&quot;	&lt;authentication&gt;\r\n&quot; + 
	&quot;		&lt;username&gt;userName&lt;/username&gt;\r\n&quot; + 
	&quot;		&lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
	&quot;	&lt;/authentication&gt;\r\n&quot; + 
	&quot;	&lt;accountList&gt;\r\n&quot;);
int k = 0;
for (int i = 0; i&lt; numOfAccountToCreate; i++)
{
	String transactions =&quot;&quot;;
for (int j = 0; j&lt; (numOfTransaction/numOfAccountToCreate); j++)
{
	transactions = transactions + &quot;\r\n&quot;+
			&quot;                &lt;transaction directId=\&quot;PerfMemoTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;                    &lt;amount&gt;742.14&lt;/amount&gt;\r\n&quot; + 
			&quot;                    &lt;name&gt;UpdatePerfTestMemoPost&lt;/name&gt;\r\n&quot; + 
			&quot;                    &lt;postDate&gt;2012-03-29&lt;/postDate&gt;\r\n&quot; + 
			&quot;                    &lt;type&gt;0&lt;/type&gt;\r\n&quot; + 
			&quot;                    &lt;pending&gt;true&lt;/pending&gt;\r\n&quot; + 
			&quot;                    &lt;memo&gt;This is update memo test!&lt;/memo&gt;\r\n&quot; + 
			&quot;                    &lt;mcc&gt;8956&lt;/mcc&gt;\r\n&quot; + 
			&quot;                    &lt;principalAmount&gt;12.00&lt;/principalAmount&gt;\r\n&quot; + 
			&quot;					&lt;interestAmount&gt;14.00&lt;/interestAmount&gt;\r\n&quot; + 
			&quot;					&lt;otherAmount&gt;24.00&lt;/otherAmount&gt;\r\n&quot; + 
			&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
			&quot;					&lt;runningBalance&gt;94.99&lt;/runningBalance&gt;\r\n&quot; + 
			&quot;					&lt;originationDate&gt;2012-05-21&lt;/originationDate&gt;\r\n&quot; + 
			&quot;					&lt;tranCode&gt;4&lt;/tranCode&gt;\r\n&quot; + 
			&quot;					&lt;checkNum&gt;4&lt;/checkNum&gt;\r\n&quot; + 
			&quot;					&lt;imageId&gt;2&lt;/imageId&gt;\r\n&quot; + 
			&quot;					&lt;postingSeq&gt;45&lt;/postingSeq&gt;                  \r\n&quot; + 
			&quot;                &lt;/transaction&gt;&quot;;
	k = k + 1;
}
if (numOfAccountToCreate == (i+1))
{
	for (int j = 0; j&lt; (numOfTransaction-numOfAccountToCreate*(numOfTransaction/numOfAccountToCreate)); j++)
	{
		transactions = transactions + &quot;\r\n&quot;+
				&quot;                &lt;transaction directId=\&quot;PerfMemoTestTransactionDirectID&quot;+(k+1)+&quot;\&quot;&gt;\r\n&quot; + 
				&quot;                    &lt;amount&gt;642.14&lt;/amount&gt;\r\n&quot; + 
				&quot;                    &lt;name&gt;UpdatePerfTestMemoPost&lt;/name&gt;\r\n&quot; + 
				&quot;                    &lt;postDate&gt;2012-03-29&lt;/postDate&gt;\r\n&quot; + 
				&quot;                    &lt;type&gt;1&lt;/type&gt;\r\n&quot; + 
				&quot;                    &lt;pending&gt;true&lt;/pending&gt;\r\n&quot; + 
				&quot;                    &lt;memo&gt;This is update memo test!&lt;/memo&gt;\r\n&quot; + 
				&quot;                    &lt;mcc&gt;8956&lt;/mcc&gt;\r\n&quot; + 
				&quot;                    &lt;principalAmount&gt;12.00&lt;/principalAmount&gt;\r\n&quot; + 
				&quot;					&lt;interestAmount&gt;14.00&lt;/interestAmount&gt;\r\n&quot; + 
				&quot;					&lt;otherAmount&gt;24.00&lt;/otherAmount&gt;\r\n&quot; + 
				&quot;					&lt;currencyCode&gt;USD&lt;/currencyCode&gt;\r\n&quot; + 
				&quot;					&lt;runningBalance&gt;94.99&lt;/runningBalance&gt;\r\n&quot; + 
				&quot;					&lt;originationDate&gt;2012-05-21&lt;/originationDate&gt;\r\n&quot; + 
				&quot;					&lt;tranCode&gt;5&lt;/tranCode&gt;\r\n&quot; + 
				&quot;					&lt;checkNum&gt;4&lt;/checkNum&gt;\r\n&quot; + 
				&quot;					&lt;imageId&gt;2&lt;/imageId&gt;\r\n&quot; + 
				&quot;					&lt;postingSeq&gt;45&lt;/postingSeq&gt;                  \r\n&quot; + 
				&quot;                &lt;/transaction&gt;&quot;;
		k = k + 1;
	}
}
bw2.write(&quot;        &lt;account directId=\&quot;accountDirectID&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
		&quot;           &lt;branchExternalId&gt;CreateBranchPerfTest-1&lt;/branchExternalId&gt;\r\n&quot; +  
		&quot;			&lt;routingTransitNumber&gt;MEMOTEST&lt;/routingTransitNumber&gt;\r\n&quot; +
		&quot;			&lt;accountNumber&gt;7856&lt;/accountNumber&gt;\r\n&quot; + 
		&quot;			&lt;balance&gt;4004.00&lt;/balance&gt;\r\n&quot; + 
		&quot;			&lt;availableBalance&gt;3950.99&lt;/availableBalance&gt;\r\n&quot; + 
		&quot;            &lt;transactionList&gt;\r\n&quot; + transactions+
		&quot;\r\n            &lt;/transactionList&gt;\r\n&quot; + 
		&quot;        &lt;/account&gt;\r\n&quot;);
}
bw2.write(&quot;&lt;/accountList&gt; \r\n&quot; + 
	&quot;&lt;/conduitMemoPostRequest&gt;\r\n&quot;);
bw2.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitUpdateMemoPostFileConduitProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select count(*) FROM [${dbName}].[dbo].[OLB_TRANSACTION] where NAME like &apos;UpdatePerfTestMemoPost&apos;) &gt; 0)
BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter



</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">externalID</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateMemoPostUpdatedData" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT 

(&apos;TOTAL ACCOUNT: &apos; +
(SELECT convert(varchar, (SELECT count(*)  from ${dbName}.[dbo].[OLB_ACCOUNT]  where ROUTING_TRANSIT_NUMBER LIKE &apos;MEMOTEST%&apos;)))
+ &apos; TOTAL TRANSACTION: &apos; +
(SELECT convert(varchar, ((SELECT  count(*)  from ${dbName}.[dbo].[OLB_TRANSACTION]  where NAME LIKE &apos;UpdatePerfTestMemoPost%&apos;))))
+ &apos; TOTAL USER_TRANSACTION_JOINT: &apos; +
(SELECT convert(varchar, (SELECT  count(*) from ${dbName}.[dbo].[OLB_TRANSACTION] t1, ${dbName}.[dbo].[USER_TRANSACTION_JOIN] t2 where t1.ID = t2.TRANSACTION_ID and t1.NAME LIKE &apos;UpdatePerfTestMemoPost%&apos;)))
+ &apos; TOTAL SPLIT_CATEGORIZATION: &apos; +
(SELECT convert(varchar, (select count(*) from ${dbName}.[dbo].[OLB_TRANSACTION] t1, ${dbName}.[dbo].[USER_TRANSACTION_JOIN] t2, ${dbName}.[dbo].[SPLIT_CATEGORIZATION] t3 
  where t1.ID = t2.TRANSACTION_ID and t2.ID=t3.USER_TRANSACTION_JOIN_ID and t1.NAME LIKE &apos;UpdatePerfTestMemoPost%&apos;)))
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">expectedResult</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateMemoPostDataInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2043349000">TOTAL ACCOUNT: ${numOfAccountToCreate} TOTAL TRANSACTION: ${numOfTransaction} TOTAL USER_TRANSACTION_JOINT: ${numOfTransaction} TOTAL SPLIT_CATEGORIZATION: ${numOfTransaction}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="DeleteTransactions" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="DropDeleteTransactionConduitFile" enabled="true">
            <stringProp name="BeanShellSampler.query">String tempPath2 = &quot;${conduitFileDropPath}delete-transactions-${__threadNum}.xml&quot;;
File tempDest2 = new File(tempPath2);

FileWriter fw2 = new FileWriter(tempDest2.getAbsoluteFile());
BufferedWriter bw2 = new BufferedWriter(fw2);;
bw2.write(&quot;&lt;?xml version=\&quot;1.0\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduitUserRequest xmlns=\&quot;http://lodosoftware.com/conduit/user\&quot; xmlns:xsi=\&quot;http://www.w3.org/2001/XMLSchema-instance\&quot;&gt;\r\n&quot; + 
		&quot;    &lt;version&gt;1.0&lt;/version&gt;\r\n&quot; + 
		&quot;    &lt;authentication&gt;\r\n&quot; + 
		&quot;        &lt;username&gt;userName&lt;/username&gt;\r\n&quot; + 
		&quot;        &lt;password&gt;password&lt;/password&gt;\r\n&quot; + 
		&quot;    &lt;/authentication&gt;\r\n&quot; + 
		&quot;    &lt;transactionDateRange&gt;\r\n&quot; + 
		&quot;        &lt;beginDate&gt;2012-04-29&lt;/beginDate&gt;\r\n&quot; + 
		&quot;        &lt;endDate&gt;2013-12-29&lt;/endDate&gt;\r\n&quot; + 
		&quot;    &lt;/transactionDateRange&gt;\r\n&quot; + 
		&quot;    &lt;accountList&gt;\r\n&quot;);

for (int i = 0; i&lt; ${numOfAccountToCreate}; i++)
{
	bw2.write(&quot;        &lt;account directId=\&quot;accountDirectID&quot;+(i+1)+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;            &lt;transactionList&gt;\r\n&quot; + 
			&quot;            &lt;/transactionList&gt;\r\n&quot; + 
			&quot;        &lt;/account&gt;\r\n&quot;);
}
bw2.write(&quot;    &lt;/accountList&gt;\r\n&quot; + 
		&quot;&lt;/conduitUserRequest&gt;\r\n&quot;);
bw2.close();</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="_WaitDeleteTransactionFileConduitProcessCompletion" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">DECLARE @MyCounter INT
DECLARE @WaitSecs INT
SET @MyCounter = 0;
SET @WaitSecs = 600;
WHILE (@MyCounter &lt; @WaitSecs) 
begin 
IF ((select count(*) FROM [${dbName}].[dbo].[OLB_TRANSACTION]) = 0)
BEGIN
    SET @MyCounter = @WaitSecs+5;
END
ELSE 
BEGIN
    WAITFOR DELAY &apos;00:00:01&apos;;
    SET @MyCounter = @MyCounter + 1;
END ;
end
select  @MyCounter

</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">externalID</stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ValidateTransactionDelete" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">

SELECT CAST(
             CASE 
                  WHEN (select count(*) FROM [${dbName}].[dbo].[OLB_TRANSACTION]) = 0
                     THEN &apos;Y&apos;
                  ELSE &apos;N&apos; 
             END as nvarchar) as fileProcessSucceed


		</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">expectedResult</stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="ValidateTransactionDelete" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="89">Y</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <collectionProp name="metricConnections">
          <collectionProp name="917712290">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="506007220">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="2112896831">Disks I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="-1383002031">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-1993889503">Memory</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="-1270662015">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-274342153">Network I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
