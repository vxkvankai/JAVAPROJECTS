<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Conduit Perf Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numOfThreads" elementType="Argument">
            <stringProp name="Argument.name">numOfThreads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfAccts" elementType="Argument">
            <stringProp name="Argument.name">numOfAccts</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfUsrs" elementType="Argument">
            <stringProp name="Argument.name">numOfUsrs</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfExistingAccountsToUpdate" elementType="Argument">
            <stringProp name="Argument.name">numOfExistingAccountsToUpdate</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfTxnsPerAccts" elementType="Argument">
            <stringProp name="Argument.name">numOfTxnsPerAccts</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="conduitFileDropPath" elementType="Argument">
            <stringProp name="Argument.name">conduitFileDropPath</stringProp>
            <stringProp name="Argument.value">/tmp/conduit.v2/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source_company_id" elementType="Argument">
            <stringProp name="Argument.name">source_company_id</stringProp>
            <stringProp name="Argument.value">d3-denver</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="isIntraday" elementType="Argument">
            <stringProp name="Argument.name">isIntraday</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountPageNo" elementType="Argument">
            <stringProp name="Argument.name">accountPageNo</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountPageSize" elementType="Argument">
            <stringProp name="Argument.name">accountPageSize</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Sql Server DB Connection" enabled="false">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">Connection-1</stringProp>
        <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};databaseName=${dbName}</stringProp>
        <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">${dbPassword}</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${dbUserName}</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySql DB Connection" enabled="false">
        <stringProp name="dataSource">Connection-1</stringProp>
        <stringProp name="poolMax">10</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery">Select 1</stringProp>
        <stringProp name="dbUrl">jdbc:mysql://localhost:3306/d3v25</stringProp>
        <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
        <stringProp name="username">d3</stringProp>
        <stringProp name="password">d3</stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create new accounts and txns" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CreateAcctsTxns" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="QueryAndGetAccountProducts" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_product_id from account_product where company_id = 1 and source = &apos;INTERNAL&apos;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">source_product_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CreateFilesWithAcctsTxnsAndDrop" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-yy-hh-mm&quot;);
String tDay =  sdf.format(new Date());

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -300);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-accts&quot;+numOfAccts + &quot;-txnsPerAcct&quot;+numOfTxnsPerAccts + &quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
vars.put(&quot;filePartialName&quot;, &quot;conduit-accts&quot;+numOfAccts + &quot;-txnsPerAcct&quot;+numOfTxnsPerAccts + &quot;-t&quot;);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);	    
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;01234567890&lt;/rqid&gt;\r\n&quot; + 
		&quot;    &lt;authn u=\&quot;user\&quot; p=\&quot;password\&quot;/&gt;\r\n&quot; + 
		&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
for (int c = 0; c&lt;numOfAccts; c++)
{
	vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-&quot;+ tDay + &quot;-${__threadNum}&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;      &lt;produid&gt;${__V(source_product_id_${__Random(1,${source_product_id_#})})}&lt;/produid&gt;\r\n&quot; + 
			&quot;      &lt;nm&gt;Performance Test Acct&quot;+ tDay + &quot;-${__threadNum}&quot;+(c+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;      &lt;rttn&gt;123456789&lt;/rttn&gt;\r\n&quot; + 
			&quot;      &lt;nbr&gt;${__threadNum}&quot;+(c+1)+&quot;&lt;/nbr&gt;\r\n&quot; + 
			&quot;      &lt;bal&gt;2500.50&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;sts&gt;open&lt;/sts&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot; + 
			&quot;      &lt;rstr&gt;0&lt;/rstr&gt;\r\n&quot; + 
			&quot;      &lt;estmt&gt;p&lt;/estmt&gt;\r\n&quot; + 
			&quot;      &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\r\n&quot;);
	if (addTxns)
	{	
		for (int txn = 0; txn&lt;numOfTxnsPerAccts; txn++)
		{
 				vars.put(&quot;partialTxnName&quot;, &quot;Performance Test Txn&quot;+ tDay+ &quot;-&quot;);
			bw.write(
			&quot;        &lt;txn uid=\&quot;txn-uid-&quot;+ tDay+ &quot;-${__threadNum}&quot;+(c+1)+(txn+1)+&quot;\&quot; am=\&quot;800\&quot; cn=\&quot;1001\&quot; ia=\&quot;78.45\&quot; im=\&quot;checking-${__threadNum}&quot; + (c+1) + (txn+1)+&quot;.jpg\&quot; mc=\&quot;0202\&quot; oa=\&quot;7896.45\&quot; od=\&quot;2013-09-10\&quot; pa=\&quot;45.45\&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;1\&quot; rb=\&quot;7894.45\&quot; tc=\&quot;TXN-CODE\&quot; tp=\&quot;d\&quot; cf=\&quot;${__threadNum}&quot;+(c+1)+(txn+1)+&quot;\&quot; dn=\&quot;TestDepositNum\&quot;&gt;\r\n&quot; + 
			&quot;          &lt;nm&gt;Performance Test Txn&quot;+ tDay+ &quot;-${__threadNum}&quot;+(c+1)+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;          &lt;mm&gt;Performance Test Transaction Memo&lt;/mm&gt;\r\n&quot; + 
			&quot;        &lt;/txn&gt;\r\n&quot;);
		}					
		bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);
	}else{
		bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);
	}
}

bw.write( 
		&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
            <stringProp name="BeanShellSampler.query">String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;
String filePath = conduitProccessDir  + &quot;${filename}.txt&quot;;
File file = new File(filePath);	
String xmlFilePath = conduitProccessDir + &quot;${filename}.xml&quot;;
File xmlFile = new File(xmlFilePath);
file.renameTo(xmlFile);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitCreateConduitProcessCompletion" enabled="true">
            <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}&quot;);
File[] files  = file.listFiles();
for(int i=0; i &lt; files.length; i++)
{
	File f = files[i];
	if(!f.isDirectory())
	{
		while (f.getName().contains(&quot;${filePartialName}&quot;)) 
	    	{
			if(counter &gt; 100000000){
			       break;
			}
			files  = file.listFiles();
			try {
			         f = files[i];
			     }
			catch (Exception e){ break;}
			counter = counter + 1;
			Thread.sleep(1000);
	    	}
	}
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="_WaitCreateConduitProcessCompletion" enabled="true">
              <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}&quot;);
File[] files  = file.listFiles();
for(int i=0; i &lt; files.length; i++)
{
	File f = files[i];
	if(!f.isDirectory())
	{
		if (f.getName().contains(&quot;${filePartialName}&quot;)) 
	    	{
			Failure= true ;
		        	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
    			break;
	    	}
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">counter</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VerifyAcctsAndTxnsInDB" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT(
&apos;TOTAL TXNS PER ACCT:&apos; +
(SELECT convert(varchar, (select count (*) from [${dbName}].[dbo].d3_transaction where name like &apos;${partialTxnName}${numOfThreads}%&apos;)/(select count (*) from [${dbName}].[dbo].d3_account where account_name like &apos;${partialAcctName}${numOfThreads}%&apos;)))
+ &apos; TOTAL ACCTS:&apos; +
(SELECT convert(varchar, (select count (*) from [${dbName}].[dbo].d3_account where account_name like &apos;${partialAcctName}${numOfThreads}%&apos;)))
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">expectedResult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyAcctsAndTxnsInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-64765183">TOTAL TXNS PER ACCT:${numOfTxnsPerAccts} TOTAL ACCTS:${numOfAccts}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create accounts only" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CreateAccts" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CreateFilesWithAcctsAndDrop" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};

String tDay =  new SimpleDateFormat(&quot;ddhhmmS&quot;).format(new Date());
long tstamp = System.currentTimeMillis();
String fileDate = new SimpleDateFormat(&quot;yyyyMMddmmss-S&quot;).format(new Date());

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -300);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-&quot;+fiName+&quot;-&quot;+fileDate+&quot;-accts-&quot;+numOfAccts; //+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

// fixed accounts - for create and then for update
//tDay = &quot;acct-uid-0&quot;; 

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
//		&quot;    &lt;parse&gt;true&lt;/parse&gt;\r\n&quot; + 
//		&quot;    &lt;validate&gt;false&lt;/validate&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
String[] products = new String[]{&quot;DEPOSIT_CHECKING&quot;,&quot;DEPOSIT_SAVINGS&quot;}; //,&quot;CREDIT_CARD&quot;};
for (int c = 0; c&lt;numOfAccts; c++)
{
	//tDay=&quot;0&quot;;
	
	String puid = products[new Random().nextInt(2)];
	vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
	bw.write(
			&quot;    &lt;acct uid=\&quot;&quot;+ tDay + &quot;-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; +
			&quot;      &lt;produid&gt;&quot; + puid + &quot;&lt;/produid&gt;\r\n&quot; +
			&quot;      &lt;nm&gt;Performance Test Acct&quot;+ &quot;0&quot; + &quot;-${__threadNum}-&quot;+(c+1)+&quot;&lt;/nm&gt;\r\n&quot; +
			&quot;      &lt;rttn&gt;123456789&lt;/rttn&gt;\r\n&quot; +
			&quot;      &lt;nbr&gt;${__threadNum}&quot;+(c+1)+&quot;&lt;/nbr&gt;\r\n&quot; +
			&quot;      &lt;bal&gt;2500.50&lt;/bal&gt;\r\n&quot; +
			&quot;      &lt;sts&gt;open&lt;/sts&gt;\r\n&quot; +
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot; +
			&quot;      &lt;cc&gt;USD&lt;/cc&gt;\r\n&quot; +
			&quot;      &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\r\n&quot; +
               &quot;      &lt;alst&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;AlternateAccountNumber\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;ACCOUNTNUMBER&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;AlternateRoutingNumber\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;082900872&lt;/a&gt;\n&quot; +
               &quot;        &lt;a n=\&quot;OverdraftLimit\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;1&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;OverdraftLimit\&quot; t=\&quot;s\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;0&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;OverdraftType\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;Basic Overdraft Protection&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;YearToDateInterest\&quot; t=\&quot;m\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;1.12&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;LastYearsInterest\&quot; t=\&quot;m\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;3.71&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;TotalHolds\&quot; t=\&quot;m\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;1.00&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;OnotherSampleOne\&quot; t=\&quot;s\&quot; d=\&quot;0\&quot; v=\&quot;0\&quot;&gt;Text&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;SampleNumTwo\&quot; t=\&quot;s\&quot; d=\&quot;0\&quot; v=\&quot;0\&quot;&gt;Text2&lt;/a&gt;\r\n&quot; +
               &quot;      &lt;/alst&gt;\r\n&quot; +
	 		&quot;    &lt;/acct&gt;\r\n&quot; +
	 		&quot;&quot;);
}

bw.write( 
		&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UpdateNoAcctNumber" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-yy-hh-mm&quot;);
String tDay =  sdf.format(new Date());
long tstamp = System.currentTimeMillis();

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-accts-&quot;+numOfAccts+&quot;-&quot;+endDate+&quot;-&quot;+tstamp+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);

for (int c = 0; c&lt;numOfAccts; c++)
{

	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-0-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;      &lt;nm&gt;Performance Test Acct0-${__threadNum}-&quot;+(c+1)+&quot;&lt;/nm&gt;\r\n&quot; +  
			&quot;      &lt;bal&gt;2500.500000&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;sts&gt;open&lt;/sts&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot; + 
			&quot;      &lt;cc&gt;USD&lt;/cc&gt;\r\n&quot; +  
			&quot;      &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\r\n&quot;);		
		bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);	
}

bw.write( 
		&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UpdateNoAcctNumberWithTransactions" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-hh-mm&quot;);
String tDay =  sdf.format(new Date());
//long tstamp = System.currentTimeMillis();
long tstampLong = System.currentTimeMillis();
String tstamp = Long.toString(tstampLong);	
vars.put(&quot;tstamp&quot;, tstamp);

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-&quot;+tstamp+&quot;-accts-&quot;+numOfAccts+&quot;-txns-&quot;+numOfTxnsPerAccts+&quot;-&quot;+endDate+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
//vars.put(&quot;filePartialName&quot;, &quot;conduit-accts-&quot;+numOfAccts+&quot;-&quot;+endDate+&quot;-&quot;+tstamp);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
String[] products = new String[]{&quot;DEPOSIT_CHECKING&quot;,&quot;DEPOSIT_SAVINGS&quot;,&quot;CREDIT_CARD&quot;};
for (int c = 0; c &lt; numOfAccts; c++)
{
//	tDay=&quot;0&quot;;
	
	String puid = products[new Random().nextInt(3)];
	vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-0-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;      &lt;bal&gt;2500.500000&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot;);
	if (addTxns)
	{	
		bw.write(
			&quot;      &lt;txnlst&gt;\r\n&quot;);
		for (int txn = 0; txn &lt; numOfTxnsPerAccts; txn++)
		{
 			//vars.put(&quot;partialTxnName&quot;, &quot;Performance Test Txn&quot;+ tDay+ &quot;-&quot;);
 			long postingSeq = (c+1)*10+txn+1;
			bw.write(
			&quot;        &lt;txn uid=\&quot;txn-uid-&quot;+ tDay+ &quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;\&quot;&quot; +
			&quot; tp=\&quot;d\&quot; am=\&quot;800.00\&quot; mc=\&quot;5812\&quot; od=\&quot;&quot;+endDate+&quot;\&quot;&quot; +
			&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;&quot;+postingSeq+&quot;\&quot;&quot; +
			&quot; &gt;\r\n&quot; + 
			&quot;          &lt;nm&gt;Performance Test Txn-&quot;+tDay+&quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;		 &lt;mm&gt;Transaction Memo &quot; + tstamp + &quot;&lt;/mm&gt;&quot; +	
			&quot;        &lt;/txn&gt;\r\n&quot;);
		}					
		bw.write(
			&quot;      &lt;/txnlst&gt;\r\n&quot; +
		     &quot;    &lt;/acct&gt;\r\n&quot;);
	}else{
		bw.write(
			&quot;    &lt;/acct&gt;\r\n&quot;);
	}
}
bw.write( 	&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
            <stringProp name="BeanShellSampler.query">String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;
String filePath = conduitProccessDir  + &quot;${filename}.txt&quot;;
File file = new File(filePath);	
String xmlFilePath = conduitProccessDir + &quot;${filename}.xml&quot;;
File xmlFile = new File(xmlFilePath);
if (file.length() &gt; 10) {
  file.renameTo(xmlFile);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitForConduitFileToProcess" enabled="false">
            <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filename}.xml&quot;);
while (file.exists()) 
{
if(counter &gt; 100000000){
       break;
}
counter = counter + 1;
Thread.sleep(1000);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="CheckForConduitFileToBeProcessed" enabled="true">
              <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filePartialName}${__threadNum}.xml&quot;);
while (file.exists()) 
{
Failure= true ;
   	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
	break;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create users only" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CreateUsrs" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CreateFilesWithUsrsAndDrop" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfUsrs = ${numOfUsrs};
int threadNum = ${numOfThreads};

String tDay =  new SimpleDateFormat(&quot;ddhhmmS&quot;).format(new Date());
long tstamp = System.currentTimeMillis();

String fileDate = new SimpleDateFormat(&quot;yyyyMMddmmss-S&quot;).format(new Date());

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -300);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-&quot;+fiName+&quot;-&quot;+fileDate+&quot;-usrs-&quot;+numOfUsrs; //+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
// new File(conduitProccessDir).mkdirs();
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

// fixed users - for create and then for update
// tDay = &quot;usr-uid-0&quot;; 

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
//		&quot;    &lt;parse&gt;true&lt;/parse&gt;\r\n&quot; + 
//		&quot;    &lt;validate&gt;false&lt;/validate&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;usrlst&gt;\r\n&quot;);
for (int c = 0; c &lt; numOfUsrs; c++) {

	bw.write(
			&quot;    &lt;usr uid=\&quot;&quot;+ tDay + &quot;-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; +
			&quot;      &lt;login&gt;test-&quot; + tDay + &quot;-&quot; + (c+1) + &quot;&lt;/login&gt;\r\n&quot; +
			&quot;      &lt;psn&gt;\r\n&quot; +
			&quot;        &lt;ln&gt;last&quot; + tDay + &quot;-&quot; + (c+1) + &quot;&lt;/ln&gt;\r\n&quot; +
			&quot;        &lt;paddr&gt;\r\n&quot; +
			&quot;          &lt;a1&gt;1010 Main St&lt;/a1&gt;\r\n&quot; +
			&quot;          &lt;ct&gt;Denver&lt;/ct&gt;\r\n&quot; +
			&quot;          &lt;st&gt;CO&lt;/st&gt;\r\n&quot; +
			&quot;          &lt;pc&gt;80110&lt;/pc&gt;\r\n&quot; +
			&quot;        &lt;/paddr&gt;&quot; +
			&quot;      &lt;/psn&gt;\r\n&quot; +
			//&quot;      &lt;usracctlist&gt;\r\n&quot; +
			//&quot;        &lt;usracct a=\&quot;a\&quot; auid=\&quot;acct-uid-001\&quot;/&gt;\r\n&quot; +
			//&quot;      &lt;/usracctlist&gt;
               &quot;      &lt;alst&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;TestAttr1\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;ACCOUNTNUMBER&lt;/a&gt;\r\n&quot; +
               &quot;        &lt;a n=\&quot;TestAttr2\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;082900872&lt;/a&gt;\n&quot; +
               &quot;        &lt;a n=\&quot;TestAttr3\&quot; d=\&quot;1\&quot; v=\&quot;1\&quot;&gt;1&lt;/a&gt;\r\n&quot; +
               &quot;      &lt;/alst&gt;\r\n&quot; +
	 		&quot;    &lt;/usr&gt;\r\n&quot; +
	 		&quot;&quot;);
}

bw.write( 
		&quot;  &lt;/usrlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UpdateNoAcctNumber" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-yy-hh-mm&quot;);
String tDay =  sdf.format(new Date());
long tstamp = System.currentTimeMillis();

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-accts-&quot;+numOfAccts+&quot;-&quot;+endDate+&quot;-&quot;+tstamp+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);

for (int c = 0; c&lt;numOfAccts; c++)
{

	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-0-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;      &lt;nm&gt;Performance Test Acct0-${__threadNum}-&quot;+(c+1)+&quot;&lt;/nm&gt;\r\n&quot; +  
			&quot;      &lt;bal&gt;2500.500000&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;sts&gt;open&lt;/sts&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot; + 
			&quot;      &lt;cc&gt;USD&lt;/cc&gt;\r\n&quot; +  
			&quot;      &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\r\n&quot;);		
		bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);	
}

bw.write( 
		&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UpdateNoAcctNumberWithTransactions" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-hh-mm&quot;);
String tDay =  sdf.format(new Date());
//long tstamp = System.currentTimeMillis();
long tstampLong = System.currentTimeMillis();
String tstamp = Long.toString(tstampLong);	
vars.put(&quot;tstamp&quot;, tstamp);

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-&quot;+tstamp+&quot;-accts-&quot;+numOfAccts+&quot;-txns-&quot;+numOfTxnsPerAccts+&quot;-&quot;+endDate+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
//vars.put(&quot;filePartialName&quot;, &quot;conduit-accts-&quot;+numOfAccts+&quot;-&quot;+endDate+&quot;-&quot;+tstamp);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
String[] products = new String[]{&quot;DEPOSIT_CHECKING&quot;,&quot;DEPOSIT_SAVINGS&quot;,&quot;CREDIT_CARD&quot;};
for (int c = 0; c &lt; numOfAccts; c++)
{
//	tDay=&quot;0&quot;;
	
	String puid = products[new Random().nextInt(3)];
	vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-0-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;      &lt;bal&gt;2500.500000&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot;);
	if (addTxns)
	{	
		bw.write(
			&quot;      &lt;txnlst&gt;\r\n&quot;);
		for (int txn = 0; txn &lt; numOfTxnsPerAccts; txn++)
		{
 			//vars.put(&quot;partialTxnName&quot;, &quot;Performance Test Txn&quot;+ tDay+ &quot;-&quot;);
 			long postingSeq = (c+1)*10+txn+1;
			bw.write(
			&quot;        &lt;txn uid=\&quot;txn-uid-&quot;+ tDay+ &quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;\&quot;&quot; +
			&quot; tp=\&quot;d\&quot; am=\&quot;800.00\&quot; mc=\&quot;5812\&quot; od=\&quot;&quot;+endDate+&quot;\&quot;&quot; +
			&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;&quot;+postingSeq+&quot;\&quot;&quot; +
			&quot; &gt;\r\n&quot; + 
			&quot;          &lt;nm&gt;Performance Test Txn-&quot;+tDay+&quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;		 &lt;mm&gt;Transaction Memo &quot; + tstamp + &quot;&lt;/mm&gt;&quot; +	
			&quot;        &lt;/txn&gt;\r\n&quot;);
		}					
		bw.write(
			&quot;      &lt;/txnlst&gt;\r\n&quot; +
		     &quot;    &lt;/acct&gt;\r\n&quot;);
	}else{
		bw.write(
			&quot;    &lt;/acct&gt;\r\n&quot;);
	}
}
bw.write( 	&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
            <stringProp name="BeanShellSampler.query">String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;
String filePath = conduitProccessDir  + &quot;${filename}.txt&quot;;
File file = new File(filePath);	
String xmlFilePath = conduitProccessDir + &quot;${filename}.xml&quot;;
File xmlFile = new File(xmlFilePath);
if (file.length() &gt; 10) {
  file.renameTo(xmlFile);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitForConduitFileToProcess" enabled="false">
            <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filename}.xml&quot;);
while (file.exists()) 
{
if(counter &gt; 100000000){
       break;
}
counter = counter + 1;
Thread.sleep(1000);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="CheckForConduitFileToBeProcessed" enabled="true">
              <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filePartialName}${__threadNum}.xml&quot;);
while (file.exists()) 
{
Failure= true ;
   	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
	break;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Add txns to Existing accounts (Nightly Job Tests) " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Account Range" enabled="true">
          <stringProp name="BeanShellSampler.query">
switch (${__threadNum}) {
	case 1:
		vars.put(&quot;acctIdFrom&quot;, &quot;1&quot;);
		vars.put(&quot;acctIdTo&quot;, &quot;100000&quot;);
		break;
	case 2:
		vars.put(&quot;acctIdFrom&quot;, &quot;100001&quot;);
		vars.put(&quot;acctIdTo&quot;, &quot;200000&quot;);
		break;
	case 3:
		vars.put(&quot;acctIdFrom&quot;, &quot;200001&quot;);
		vars.put(&quot;acctIdTo&quot;, &quot;300000&quot;);
		break;
	case 4:
		vars.put(&quot;acctIdFrom&quot;, &quot;300001&quot;);
		vars.put(&quot;acctIdTo&quot;, &quot;400000&quot;);
		break;
	case 5:
		vars.put(&quot;acctIdFrom&quot;, &quot;400001&quot;);
		vars.put(&quot;acctIdTo&quot;, &quot;500000&quot;);
		break;
	case 6:
		vars.put(&quot;acctIdFrom&quot;, &quot;500001&quot;);
		vars.put(&quot;acctIdTo&quot;, &quot;600000&quot;);
		break;
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="QueryGetSourceAccountIDFromDB" enabled="true">
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id limit ${accountPageNo},2;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">Acct_source_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Update accounts with transactions" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

vars.put(&quot;accountPageNo&quot;, &quot;&quot;+(${accountPageNo}+1));

int numOfAccts = ${numOfExistingAccountsToUpdate};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};


int acctnum = ${numOfExistingAccountsToUpdate}+1;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMMddhhmm&quot;);
String tDay =  sdf.format(new Date());

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());


long tstampLong = System.currentTimeMillis();
String tstamp = Long.toString(tstampLong);	
vars.put(&quot;randomNum&quot;, tstamp);


String fileName = &quot;conduit-accts&quot;+numOfAccts + &quot;-txnsPerAcct&quot;+numOfTxnsPerAccts + &quot;-&quot; + vars.get(&quot;randomNum&quot;) + &quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
vars.put(&quot;filePartialName&quot;, &quot;conduit-accts&quot;+numOfAccts + &quot;-txnsPerAcct&quot;+numOfTxnsPerAccts + &quot;-&quot;);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);	    
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
for (int c=1; c &lt; acctnum; c++)
{
	vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
	bw.write(
			&quot;    &lt;acct uid=\&quot;&quot;+vars.get(&quot;Acct_source_id_&quot;+c)+&quot;\&quot;&gt;\r\n&quot; +
			&quot;       &lt;avbal&gt;2000.00&lt;/avbal&gt;\r\n&quot; +
			&quot;       &lt;bal&gt;2500.00&lt;/bal&gt;&quot;);
	if (addTxns)
	{	
		bw.write(&quot;&lt;txnlst&gt;\r\n&quot;);
		for (int txn = 0; txn &lt; numOfTxnsPerAccts; txn++)
		{
 			long postingSeq = (c+1)*10+txn+1;
			bw.write(
			&quot;        &lt;txn uid=\&quot;&quot;+ tDay+ &quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;\&quot;&quot; +
			&quot; tp=\&quot;d\&quot; am=\&quot;800.00\&quot; mc=\&quot;5812\&quot; od=\&quot;&quot;+endDate+&quot;\&quot;&quot; +
			&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;&quot;+postingSeq+&quot;\&quot;&quot; +
			&quot; &gt;\r\n&quot; + 
			&quot;          &lt;nm&gt;Performance Test Txn-&quot;+tDay+&quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;		 &lt;mm&gt;Transaction Memo &quot; + tstamp + &quot;&lt;/mm&gt;&quot; +	
			&quot;        &lt;/txn&gt;\r\n&quot;);
		}					
		bw.write(&quot; &lt;/txnlst&gt;\r\n      &lt;/acct&gt;\r\n&quot;);
	}else{
		bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);
	}
}

bw.write( 
		&quot;  &lt;/acctlst&gt;\r\n&quot;); 
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
          <stringProp name="BeanShellSampler.query">String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;
String filePath = conduitProccessDir  + &quot;${filename}.txt&quot;;
File file = new File(filePath);	
String xmlFilePath = conduitProccessDir + &quot;${filename}.xml&quot;;
File xmlFile = new File(xmlFilePath);
file.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitForConduitFileToProcess" enabled="true">
          <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filename}.xml&quot;);
while (file.exists()) 
{
if(counter &gt; 100000000){
       break;
}
counter = counter + 1;
Thread.sleep(1000);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="_WaitForConduitFileToProcess" enabled="true">
            <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}&quot;);
File[] files  = file.listFiles();
for(int i=0; i &lt; files.length; i++)
{
	File f = files[i];
	if(!f.isDirectory())
	{
		if (f.getName().contains(&quot;${filePartialName}&quot;)) 
	    	{
			Failure= true ;
		        	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
    			break;
	    	}
	}
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters">counter</stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VerifyNumOfTxnsInDatabase" enabled="true">
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="query">SELECT(
&apos;TOTAL TXNS IN DATABASE PER THREAD:&apos; +
(SELECT convert(varchar, (select count (*) from d3_transaction where memo like &apos;%${randomNum}&apos;)))
)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">expectedResult</stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyNumOfTxnsInDatabase" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="613733307">TOTAL TXNS IN DATABASE PER THREAD:${__jexl(${numOfTxnsPerAccts}*${numOfExistingAccountsToUpdate})}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MySql - Add txns to Existing accounts" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Account Range" enabled="true">
          <stringProp name="BeanShellSampler.query">
vars.put(&quot;acctIdFrom&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*(${__threadNum}-1)+1)}&quot;);
vars.put(&quot;acctIdTo&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*${__threadNum})}&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit Header" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMMddhhmm&quot;);
String tDay =  sdf.format(new Date());
sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());
Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());


String tstamp = &quot;&quot;+System.currentTimeMillis();	
String fileName = &quot;conduit-&quot;+tstamp+&quot;-accts-${numOfExistingAccountsToUpdate}-txns-${numOfTxnsPerAccts}-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = &quot;${conduitFileDropPath}&quot; + fileName + &quot;.txt&quot;;
vars.put(&quot;filePath&quot;, filePath);

File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
bw.flush();
bw.close();

vars.put(&quot;haveAccounts&quot;, &quot;true&quot;);
vars.put(&quot;txnCount&quot;, &quot;0&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${haveAccounts}</stringProp>
        </WhileController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="MySql-QueryGetSourceAccountIDFromDB" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id limit ${accountPageNo},${accountPageSize};</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">Acct_source_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Update accounts with transactions" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

vars.put(&quot;accountPageNo&quot;, &quot;&quot;+(new Integer(&quot;${accountPageNo}&quot;)+new Integer(&quot;${accountPageSize}&quot;)));

String tDay = new SimpleDateFormat(&quot;yyMMddhhmm&quot;).format(new Date());
String endDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date());

File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);

int size = ${accountPageSize};
int txSize = ${numOfTxnsPerAccts};
String[] mcc = {&quot;2741&quot;,&quot;5192&quot;,&quot;5812&quot;,&quot;5813&quot;,&quot;5814&quot;,&quot;5942&quot;,&quot;5945&quot;,&quot;5946&quot;,&quot;5947&quot;,&quot;5963&quot;,&quot;5964&quot;,&quot;5965&quot;,&quot;5968&quot;,&quot;5973&quot;,&quot;5978&quot;,&quot;5992&quot;,&quot;5994&quot;,&quot;5995&quot;,&quot;6010&quot;,&quot;6012&quot;,&quot;6300&quot;,&quot;6399&quot;,&quot;7012&quot;,&quot;7261&quot;,&quot;7277&quot;,&quot;7333&quot;,&quot;7338&quot;,&quot;7395&quot;,&quot;7699&quot;,&quot;9311&quot;,&quot;9399&quot;,&quot;0742&quot;,&quot;4511&quot;,&quot;4722&quot;,&quot;3023&quot;,&quot;3058&quot;,&quot;3061&quot;,&quot;3219&quot;,&quot;3357&quot;,&quot;3649&quot;,&quot;5047&quot;,&quot;5122&quot;,&quot;5912&quot;,&quot;5975&quot;,&quot;5976&quot;,&quot;5976&quot;,&quot;7011&quot;,&quot;8011&quot;,&quot;8011&quot;,&quot;8021&quot;,&quot;8031&quot;,&quot;8041&quot;,&quot;8041&quot;,&quot;8042&quot;,&quot;8043&quot;,&quot;8049&quot;,&quot;8050&quot;,&quot;8062&quot;,&quot;8062&quot;,&quot;8071&quot;,&quot;8071&quot;,&quot;8099&quot;};

for (int varIdx = 1; varIdx &lt;= size; varIdx++)
{
	if (vars.get(&quot;Acct_source_id_&quot;+varIdx) == null) {
		vars.put(&quot;haveAccounts&quot;, &quot;false&quot;);
		break;
	}
	bw.write(
			&quot;    &lt;acct uid=\&quot;&quot;+vars.get(&quot;Acct_source_id_&quot;+varIdx)+&quot;\&quot;&gt;\r\n&quot; +
			&quot;      &lt;avbal&gt;&quot;+(new Random().nextInt(9999))+&quot;.50&lt;/avbal&gt;\r\n&quot; +
			&quot;      &lt;bal&gt;&quot;+(new Random().nextInt(9999))+&quot;.75&lt;/bal&gt;\r\n&quot;);

	if(txSize &gt; 0){
		bw.write(&quot;      &lt;txnlst&gt;\r\n&quot;);
		for (int txn = 0; txn &lt; txSize; txn++)
		{
			// 0202 5812 cat code
			long postingSeq = (varIdx+1)*10+txn+1;
			String mcCode = mcc[new Random().nextInt(mcc.length)];
			// mcCode = &quot;2741&quot;;
			bw.write(
			&quot;         &lt;txn uid=\&quot;&quot;+ tDay+ &quot;-${__threadNum}-&quot;+(varIdx+1)+&quot;-&quot;+(txn+1)+&quot;\&quot;&quot; +
			&quot; tp=\&quot;d\&quot; am=\&quot;&quot;+(new Random().nextInt(999))+&quot;.00\&quot; mc=\&quot;&quot;+mcCode+&quot;\&quot; od=\&quot;&quot;+endDate+&quot;\&quot;&quot; +
			&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;&quot;+postingSeq+&quot;\&quot;&quot; +
			&quot; &gt;\r\n&quot; + 
			&quot;           &lt;nm&gt;Performance Test Txn-&quot;+tDay+&quot;-${__threadNum}-&quot;+(varIdx+1)+&quot;-&quot;+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;         &lt;/txn&gt;\r\n&quot;);
			
			vars.put(&quot;txnCount&quot;, &quot;&quot;+(new Integer(&quot;${txnCount}&quot;)+1));
		}				
		bw.write(&quot;      &lt;/txnlst&gt;\r\n&quot;);
	}
	bw.write(&quot;     &lt;/acct&gt;\r\n&quot;);
}

bw.flush();
bw.close();		
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit End" enabled="true">
          <stringProp name="BeanShellSampler.query">
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;/acctlst&gt;&lt;/conduit&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
          <stringProp name="BeanShellSampler.query">
String path = &quot;${conduitFileDropPath}&quot;;
String name = &quot;${filename}&quot;;

File txtFile = new File(path+name+&quot;.txt&quot;);	
File xmlFile = new File(path+name+&quot;.xml&quot;);

txtFile.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitForConduitFileToProcess" enabled="false">
          <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filename}.xml&quot;);
while (file.exists()) 
{
if(counter &gt; 100000000){
       break;
}
counter = counter + 1;
Thread.sleep(1000);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="_WaitForConduitFileToProcess" enabled="true">
            <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}&quot;);
File[] files  = file.listFiles();
for(int i=0; i &lt; files.length; i++)
{
	File f = files[i];
	if(!f.isDirectory())
	{
		if (f.getName().contains(&quot;${filePartialName}&quot;)) 
	    	{
			Failure= true ;
		        	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
    			break;
	    	}
	}
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters">counter</stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VerifyNumOfTxnsInDatabase" enabled="false">
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="query">SELECT(
&apos;TOTAL TXNS IN DATABASE PER THREAD:&apos; +
(SELECT convert(varchar, (select count (*) from d3_transaction where memo like &apos;%${randomNum}&apos;)))
)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">expectedResult</stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyNumOfTxnsInDatabase" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="613733307">TOTAL TXNS IN DATABASE PER THREAD:${__jexl(${numOfTxnsPerAccts}*${numOfExistingAccountsToUpdate})}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sql Server- Add txns to Existing accounts" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Account Range" enabled="true">
          <stringProp name="BeanShellSampler.query">
vars.put(&quot;acctIdFrom&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*(${__threadNum}-1)+1)}&quot;);
vars.put(&quot;acctIdTo&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*${__threadNum})}&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit Header" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMMddhhmm&quot;);
String tDay =  sdf.format(new Date());
sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());
Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());


String tstamp = &quot;&quot;+System.currentTimeMillis();	
String fileName = &quot;conduit-&quot;+tstamp+&quot;-accts-${numOfExistingAccountsToUpdate}-txns-${numOfTxnsPerAccts}-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = &quot;${conduitFileDropPath}&quot; + fileName + &quot;.txt&quot;;
vars.put(&quot;filePath&quot;, filePath);

File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
bw.flush();
bw.close();

vars.put(&quot;haveAccounts&quot;, &quot;true&quot;);
vars.put(&quot;txnCount&quot;, &quot;0&quot;);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${haveAccounts}</stringProp>
        </WhileController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Sql Server-QueryGetSourceAccountIDFromDB" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id OFFSET ${accountPageNo} ROWS FETCH NEXT ${accountPageSize} ROWS ONLY;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">Acct_source_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Update accounts with transactions" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

vars.put(&quot;accountPageNo&quot;, &quot;&quot;+(new Integer(&quot;${accountPageNo}&quot;)+new Integer(&quot;${accountPageSize}&quot;)));

String tDay = new SimpleDateFormat(&quot;yyMMddhhmm&quot;).format(new Date());
String endDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date());

File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);

int size = ${accountPageSize};
for (int varIdx = 1; varIdx &lt;= size; varIdx++)
{
	if (vars.get(&quot;Acct_source_id_&quot;+varIdx) == null) {
		vars.put(&quot;haveAccounts&quot;, &quot;false&quot;);
		break;
	}
	bw.write(
			&quot;    &lt;acct uid=\&quot;&quot;+vars.get(&quot;Acct_source_id_&quot;+varIdx)+&quot;\&quot;&gt;\r\n&quot; +
			&quot;      &lt;avbal&gt;&quot;+(new Random().nextInt(9999))+&quot;.50&lt;/avbal&gt;\r\n&quot; +
			&quot;      &lt;bal&gt;&quot;+(new Random().nextInt(9999))+&quot;.75&lt;/bal&gt;\r\n&quot;);
if(${addTxns}){
			
	bw.write(&quot;      &lt;txnlst&gt;\r\n&quot;);
	int txSize = ${numOfTxnsPerAccts};
	for (int txn = 0; txn &lt; txSize; txn++)
	{
		long postingSeq = (varIdx+1)*10+txn+1;
		bw.write(
		&quot;         &lt;txn uid=\&quot;&quot;+ tDay+ &quot;-${__threadNum}-&quot;+(varIdx+1)+&quot;-&quot;+(txn+1)+&quot;\&quot;&quot; +
		&quot; tp=\&quot;d\&quot; am=\&quot;&quot;+(new Random().nextInt(999))+&quot;.00\&quot; mc=\&quot;5812\&quot; od=\&quot;&quot;+endDate+&quot;\&quot;&quot; +
		&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;&quot;+postingSeq+&quot;\&quot;&quot; +
		&quot; &gt;\r\n&quot; + 
		&quot;           &lt;nm&gt;Performance Test Txn-&quot;+tDay+&quot;-${__threadNum}-&quot;+(varIdx+1)+&quot;-&quot;+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
		&quot;         &lt;/txn&gt;\r\n&quot;);
		
		vars.put(&quot;txnCount&quot;, &quot;&quot;+(new Integer(&quot;${txnCount}&quot;)+1));
	}				
	bw.write(&quot;      &lt;/txnlst&gt;\r\n&quot;);
}
bw.write(&quot;     &lt;/acct&gt;\r\n&quot;);
}

bw.flush();
bw.close();		
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit End" enabled="true">
          <stringProp name="BeanShellSampler.query">
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;/acctlst&gt;&lt;/conduit&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="false">
          <stringProp name="BeanShellSampler.query">
String path = &quot;${conduitFileDropPath}&quot;;
String name = &quot;${filename}&quot;;

File txtFile = new File(path+name+&quot;.txt&quot;);	
File xmlFile = new File(path+name+&quot;.xml&quot;);

txtFile.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitForConduitFileToProcess" enabled="false">
          <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filename}.xml&quot;);
while (file.exists()) 
{
if(counter &gt; 100000000){
       break;
}
counter = counter + 1;
Thread.sleep(1000);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="_WaitForConduitFileToProcess" enabled="true">
            <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}&quot;);
File[] files  = file.listFiles();
for(int i=0; i &lt; files.length; i++)
{
	File f = files[i];
	if(!f.isDirectory())
	{
		if (f.getName().contains(&quot;${filePartialName}&quot;)) 
	    	{
			Failure= true ;
		        	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
    			break;
	    	}
	}
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters">counter</stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VerifyNumOfTxnsInDatabase" enabled="false">
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="query">SELECT(
&apos;TOTAL TXNS IN DATABASE PER THREAD:&apos; +
(SELECT convert(varchar, (select count (*) from d3_transaction where memo like &apos;%${randomNum}&apos;)))
)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="variableNames">expectedResult</stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyNumOfTxnsInDatabase" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="613733307">TOTAL TXNS IN DATABASE PER THREAD:${__jexl(${numOfTxnsPerAccts}*${numOfExistingAccountsToUpdate})}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Create new Users and associate existing accounts" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1405833721000</longProp>
        <longProp name="ThreadGroup.end_time">1405833721000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="numOfAccountsToAssociateToUser" elementType="Argument">
              <stringProp name="Argument.name">numOfAccountsToAssociateToUser</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numOfUsers" elementType="Argument">
              <stringProp name="Argument.name">numOfUsers</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="JDBC Request" enabled="true">
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">select source_account_id from [${dbName}].[dbo].d3_account where deleted &lt;&gt; 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">source_account_id</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start"></stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr">${__jexl(${numOfAccountsToAssociateToUser}*${numOfUsers})}</stringProp>
          <stringProp name="CounterConfig.name">count</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CreateUsersAndAssociateExistingAccounts" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numberOfUsersToCreate = ${numOfUsers};
int numberOfAccountsToAssociate = ${numOfAccountsToAssociateToUser};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-yy-hh-mm&quot;);
String tDay =  sdf.format(new Date());
long tstamp = System.currentTimeMillis();

String fileName = &quot;conduit-Users&quot;+numberOfUsersToCreate + &quot;-AcctsPerUser-&quot;+numberOfAccountsToAssociate + &quot;-&quot; + tstamp + &quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);	    
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;01234567890&lt;/rqid&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;usrlst&gt;\r\n&quot;);
String userUid = null;				
for(int y=0; y&lt;numberOfUsersToCreate;y++){	
	bw.write(
			&quot;    &lt;usr uid=\&quot;usr-uid-&quot;+ tDay + &quot;-${__threadNum}&quot;+(y+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;    &lt;login&gt;usr-&quot; + tDay + &quot;-${__threadNum}&quot; + (y+1) + &quot;&lt;/login&gt;\r\n&quot; +
			&quot;	&lt;txid&gt;112233&quot; + &quot;${__threadNum}&quot; + (y+1) + &quot;&lt;/txid&gt;\r\n&quot; +
			&quot;	&lt;txtp&gt;s&lt;/txtp&gt;\r\n&quot; +
			&quot;	&lt;enrl&gt;true&lt;/enrl&gt;\r\n&quot; +
			&quot;	&lt;dob&gt;1980-10-25&lt;/dob&gt;\r\n&quot; +
			&quot;	&lt;psn&gt;\r\n&quot; +
			&quot;		&lt;fn&gt;UserFirstName&lt;/fn&gt;\r\n&quot; +
			&quot;		&lt;ln&gt;UserLastName&lt;/ln&gt;\r\n&quot; +
			&quot;		&lt;pem&gt;primaryEmail@d3banking.com&lt;/pem&gt;\r\n&quot; +
			&quot;		&lt;aem&gt;alternateEmail@d3banking.com&lt;/aem&gt;\r\n&quot; +
			&quot;		&lt;hph&gt;3031112222&lt;/hph&gt;\r\n&quot; +
			&quot;		&lt;wph&gt;3034445555&lt;/wph&gt;\r\n&quot; +
			&quot;		&lt;paddr&gt;\r\n&quot; +
			&quot;			&lt;a1&gt;1234 Street Address -1&lt;/a1&gt;\r\n&quot; +
			&quot;			&lt;a2&gt;Street Address -2 &lt;/a2&gt;\r\n&quot; +
			&quot;			&lt;ct&gt;Englewood&lt;/ct&gt;\r\n&quot; +
			&quot;			&lt;st&gt;CO&lt;/st&gt;\r\n&quot; +
			&quot;			&lt;pc&gt;80109&lt;/pc&gt;\r\n&quot; +
			&quot;		&lt;/paddr&gt;\r\n&quot; +
			&quot;	&lt;/psn&gt;\r\n&quot; +
			&quot;	&lt;usracctlst&gt;\r\n&quot;) ;
			
			String userAccountId = null;
			int counter = ${count};
			if(y&gt;0){						
				counter = y*numberOfAccountsToAssociate+counter;						
			}						 
			for(int x=0;x&lt;numberOfAccountsToAssociate;x++){
				userAccountId = vars.get(&quot;source_account_id_&quot; + counter);
			
				bw.write(
					&quot;	&lt;usracct auid=\&quot;&quot;+ userAccountId + &quot;\&quot; a=\&quot;a\&quot;/&gt;\r\n&quot; 
					);
				counter++;	
			}

			bw.write( 
				&quot;  	&lt;/usracctlst&gt;\r\n&quot; +
				&quot;   &lt;/usr&gt;\r\n&quot; );
}
bw.write(&quot;	&lt;/usrlst&gt;\r\n&quot; +
		&quot;  &lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
          <stringProp name="BeanShellSampler.query">String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;
String filePath = conduitProccessDir  + &quot;${filename}.txt&quot;;
File file = new File(filePath);	
String xmlFilePath = conduitProccessDir + &quot;${filename}.xml&quot;;
File xmlFile = new File(xmlFilePath);
file.renameTo(xmlFile);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitForConduitFileToProcess" enabled="true">
          <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filename}.xml&quot;);
while (file.exists()) 
{
if(counter &gt; 100000000){
       break;
}
counter = counter + 1;
Thread.sleep(1000);
}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="CheckForConduitFileToBeProcessed" enabled="true">
            <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filePartialName}${__threadNum}.xml&quot;);
while (file.exists()) 
{
Failure= true ;
   	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
	break;
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CheckTimeTakenToProcessFile" enabled="true">
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT request_name, DATEDIFF(SECOND, start_time, end_time)
  FROM [${dbName}].[dbo].[conduit_stats]
  where request_name = &apos;${filename}.xml&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">processedFileName, timeTakenToProcessFile</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <objProp>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <objProp>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <objProp>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
