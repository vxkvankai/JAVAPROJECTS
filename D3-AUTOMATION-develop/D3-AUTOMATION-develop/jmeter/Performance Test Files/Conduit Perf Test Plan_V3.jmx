<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.6" jmeter="2.11 r1554548">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Conduit Perf Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="conduitFileDropPath" elementType="Argument">
            <stringProp name="Argument.name">conduitFileDropPath</stringProp>
            <stringProp name="Argument.value">C:\\conduit\\temp\\</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbURL" elementType="Argument">
            <stringProp name="Argument.name">dbURL</stringProp>
            <stringProp name="Argument.value">10.1.1.151</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbName" elementType="Argument">
            <stringProp name="Argument.name">dbName</stringProp>
            <stringProp name="Argument.value">d3qa_v23</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUserName" elementType="Argument">
            <stringProp name="Argument.name">dbUserName</stringProp>
            <stringProp name="Argument.value">d3qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPassword" elementType="Argument">
            <stringProp name="Argument.name">dbPassword</stringProp>
            <stringProp name="Argument.value">d3qa</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfThreads" elementType="Argument">
            <stringProp name="Argument.name">numOfThreads</stringProp>
            <stringProp name="Argument.value">4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfAccts" elementType="Argument">
            <stringProp name="Argument.name">numOfAccts</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="numOfTxnsPerAccts" elementType="Argument">
            <stringProp name="Argument.name">numOfTxnsPerAccts</stringProp>
            <stringProp name="Argument.value">3</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="addTxns" elementType="Argument">
            <stringProp name="Argument.name">addTxns</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="source_company_id" elementType="Argument">
            <stringProp name="Argument.name">source_company_id</stringProp>
            <stringProp name="Argument.value">fi1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Only Accts and/or Txns (Nightly Job Tests)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};${dbName}</stringProp>
          <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CreateAcctsTxns" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="QueryAndGetAccountProducts" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_product_id from [${dbName}].[dbo].account_product where company_id = 1 and source = &apos;INTERNAL&apos; and len(source_product_id) &lt; 31</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">source_product_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CreateFilesWithAcctsTxnsAndDrop" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-yy-hh-mm&quot;);
String tDay =  sdf.format(new Date());

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -300);
String bgnDate =  sdf.format(cal.getTime());
String fileNames = &quot;&quot;;

for (int t = 0; t&lt;threadNum; t++)
{
	Random generator = new Random();
	String fileName = &quot;conduit-accts&quot;+numOfAccts + &quot;-txnsPerAcct&quot;+numOfTxnsPerAccts + &quot;-t&quot; + (t+1);
	if (fileNames.equals(&quot;&quot;))
	{
		fileNames = fileName;
	}else{
		fileNames = fileNames + &quot;;&quot; + fileName;
	}
	vars.put(&quot;fileNames&quot;, fileNames);
	vars.put(&quot;filePartialName&quot;, &quot;conduit-accts&quot;+numOfAccts + &quot;-txnsPerAcct&quot;+numOfTxnsPerAccts + &quot;-t&quot;);
	String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
	File file = new File(filePath);	    
	FileWriter fw = new FileWriter(file.getAbsoluteFile());
	BufferedWriter bw = new BufferedWriter(fw);	
	
	bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
			&quot;&lt;conduit&gt;\r\n&quot; + 
			&quot;  &lt;hdr&gt;\r\n&quot; + 
			&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
			&quot;    &lt;rqid&gt;01234567890&lt;/rqid&gt;\r\n&quot; + 
			&quot;    &lt;authn u=\&quot;user\&quot; p=\&quot;password\&quot;/&gt;\r\n&quot; + 
			&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
			&quot;  &lt;/hdr&gt;\r\n&quot; + 
			&quot;  &lt;acctlst&gt;\r\n&quot;);
	for (int c = 0; c&lt;numOfAccts; c++)
	{
		vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
		bw.write(
				&quot;    &lt;acct uid=\&quot;acct-uid-&quot;+ tDay + &quot;-&quot; +(t+1)+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
				&quot;      &lt;produid&gt;${__V(source_product_id_${__Random(0,${source_product_id_#})})}&lt;/produid&gt;\r\n&quot; + 
				&quot;      &lt;nm&gt;Performance Test Acct&quot;+ tDay + &quot;-&quot;+(t+1)+(c+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
				&quot;      &lt;rttn&gt;123456789&lt;/rttn&gt;\r\n&quot; + 
				&quot;      &lt;nbr&gt;&quot;+(t+1)+(c+1)+&quot;&lt;/nbr&gt;\r\n&quot; + 
				&quot;      &lt;bal&gt;2500.50&lt;/bal&gt;\r\n&quot; + 
				&quot;      &lt;sts&gt;open&lt;/sts&gt;\r\n&quot; + 
				&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot; + 
				&quot;      &lt;rstr&gt;0&lt;/rstr&gt;\r\n&quot; + 
				&quot;      &lt;estmt&gt;p&lt;/estmt&gt;\r\n&quot; + 
				&quot;      &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\r\n&quot;);
		if (addTxns)
		{	
			for (int txn = 0; txn&lt;numOfTxnsPerAccts; txn++)
			{
      				vars.put(&quot;partialTxnName&quot;, &quot;Performance Test Txn&quot;+ tDay+ &quot;-&quot;);
				bw.write(
				&quot;        &lt;txn uid=\&quot;txn-uid-&quot;+ tDay+ &quot;-&quot;+(t+1)+(c+1)+(txn+1)+&quot;\&quot; am=\&quot;800\&quot; cn=\&quot;1001\&quot; ia=\&quot;78.45\&quot; im=\&quot;checkimg-&quot;+(t+1)+(c+1)+				(txn+1)+&quot;.jpg\&quot; mc=\&quot;0202\&quot; oa=\&quot;7896.45\&quot; od=\&quot;2013-09-10\&quot; pa=\&quot;45.45\&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;1\&quot; rb=\&quot;7894.45\&quot; tc=\&quot;TXN-CODE\&quot; tp=\&quot;d\&quot; cf=\&quot;&quot;+(t+1)+(c+1)+(txn+1)+&quot;\&quot; dn=\&quot;TestDepositNum\&quot;&gt;\r\n&quot; + 
				&quot;          &lt;nm&gt;Performance Test Txn&quot;+ tDay+ &quot;-&quot;+(t+1)+(c+1)+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
				&quot;          &lt;mm&gt;Performance Test Transaction Memo&lt;/mm&gt;\r\n&quot; + 
				&quot;        &lt;/txn&gt;\r\n&quot;);
			}					
			bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);
		}else{
			bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);
		}
	}
	
	bw.write( 
			&quot;  &lt;/acctlst&gt;\r\n&quot;);
	bw.write(&quot;&lt;/conduit&gt;&quot;);
	bw.close();	
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
            <stringProp name="BeanShellSampler.query">String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;
String filesCreated = &quot;${fileNames}&quot;;
String[] files = filesCreated.split(&quot;;&quot;);
for (int f = 0; f &lt; files.length; f++)
{		
	String filePath = conduitProccessDir  + files[f]+ &quot;.txt&quot;;
	File file = new File(filePath);	
	String xmlFilePath = conduitProccessDir + files[f] + &quot;.xml&quot;;
	File xmlFile = new File(xmlFilePath);
	file.renameTo(xmlFile);
	if (file.exists())
	{
		file.delete();
	}
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitCreateConduitProcessCompletion" enabled="false">
            <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}&quot;);
File[] files  = file.listFiles();
for(int i=0; i &lt; files.length; i++)
{
	File f = files[i];
	if(!f.isDirectory())
	{
		while (f.getName().contains(&quot;${filePartialName}&quot;)) 
	    	{
			if(counter &gt; 100000000){
			       break;
			}
			files  = file.listFiles();
			try {
			         f = files[i];
			     }
			catch (Exception e){ break;}
			counter = counter + 1;
			Thread.sleep(1000);
	    	}
	}
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="_WaitCreateConduitProcessCompletion" enabled="true">
              <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}&quot;);
File[] files  = file.listFiles();
for(int i=0; i &lt; files.length; i++)
{
	File f = files[i];
	if(!f.isDirectory())
	{
		if (f.getName().contains(&quot;${filePartialName}&quot;)) 
	    	{
			Failure= true ;
		        	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
    			break;
	    	}
	}
}</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters">counter</stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="VerifyAcctsAndTxnsInDB" enabled="false">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="query">SELECT(
&apos;TOTAL TXNS PER ACCT:&apos; +
(SELECT convert(varchar, (select count (*) from [${dbName}].[dbo].d3_transaction where name like &apos;${partialTxnName}%&apos;)/(select count (*) from [${dbName}].[dbo].d3_account where account_name like &apos;${partialAcctName}${numOfThreads}%&apos;)))
+ &apos; TOTAL ACCTS:&apos; +
(SELECT convert(varchar, (select count (*) from [${dbName}].[dbo].d3_account where account_name like &apos;${partialAcctName}${numOfThreads}%&apos;)))
)</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames">expectedResult</stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="VerifyAcctsAndTxnsInDB" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-64765183">TOTAL TXNS PER ACCT:${numOfTxnsPerAccts} TOTAL ACCTS:${numOfAccts}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">fileProcessSucceed</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">1000</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <collectionProp name="metricConnections">
          <collectionProp name="917712290">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="66952">CPU</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="-1383002031">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-1993889503">Memory</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="506007220">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="2112896831">Disks I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
          <collectionProp name="-1270662015">
            <stringProp name="-1204607085">localhost</stringProp>
            <stringProp name="1600768">4444</stringProp>
            <stringProp name="-274342153">Network I/O</stringProp>
            <stringProp name="0"></stringProp>
          </collectionProp>
        </collectionProp>
      </kg.apc.jmeter.perfmon.PerfMonCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
