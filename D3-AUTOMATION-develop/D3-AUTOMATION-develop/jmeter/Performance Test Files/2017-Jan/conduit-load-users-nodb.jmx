<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.1" jmeter="3.1 r1770033">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Conduit File Accounts and Transactions" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Defaults" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="numberOfAccounts" elementType="Argument">
            <stringProp name="Argument.name">numberOfAccounts</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Number of accounts to generate</stringProp>
          </elementProp>
          <elementProp name="groupOffset" elementType="Argument">
            <stringProp name="Argument.name">groupOffset</stringProp>
            <stringProp name="Argument.value">100</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountOffset" elementType="Argument">
            <stringProp name="Argument.name">accountOffset</stringProp>
            <stringProp name="Argument.value">1001</stringProp>
            <stringProp name="Argument.desc">Starting account offset</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountPrefix" elementType="Argument">
            <stringProp name="Argument.name">accountPrefix</stringProp>
            <stringProp name="Argument.value">DDA-1-</stringProp>
            <stringProp name="Argument.desc">Account UID prefix</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sourceCompanyId" elementType="Argument">
            <stringProp name="Argument.name">sourceCompanyId</stringProp>
            <stringProp name="Argument.value">perf</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">The company source ID to place accounts under</stringProp>
          </elementProp>
          <elementProp name="minMaxTxnsPerAcct" elementType="Argument">
            <stringProp name="Argument.name">minMaxTxnsPerAcct</stringProp>
            <stringProp name="Argument.value">1-5</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Min and max transactions (random) to create per account</stringProp>
          </elementProp>
          <elementProp name="numOfThreads" elementType="Argument">
            <stringProp name="Argument.name">numOfThreads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How many files to generate</stringProp>
          </elementProp>
          <elementProp name="categorizeTransactions" elementType="Argument">
            <stringProp name="Argument.name">categorizeTransactions</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Enable/disable categorization</stringProp>
          </elementProp>
          <elementProp name="categorizationPercent" elementType="Argument">
            <stringProp name="Argument.name">categorizationPercent</stringProp>
            <stringProp name="Argument.value">30</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">How many transaction % wise shoudl have valid mcc codes</stringProp>
          </elementProp>
          <elementProp name="conduitFileDropPath" elementType="Argument">
            <stringProp name="Argument.name">conduitFileDropPath</stringProp>
            <stringProp name="Argument.value">/tmp/conduit.v2/temp2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Default to user.home</stringProp>
          </elementProp>
          <elementProp name="suppressAlerts" elementType="Argument">
            <stringProp name="Argument.name">suppressAlerts</stringProp>
            <stringProp name="Argument.value">false</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Enable/disable alerts (supress flag)</stringProp>
          </elementProp>
          <elementProp name="threadMultiplier" elementType="Argument">
            <stringProp name="Argument.name">threadMultiplier</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Thread multiplier - only used for file name</stringProp>
          </elementProp>
          <elementProp name="serverName" elementType="Argument">
            <stringProp name="Argument.name">serverName</stringProp>
            <stringProp name="Argument.value">cond1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Server name - only used for file name</stringProp>
          </elementProp>
          <elementProp name="userUidPrefix" elementType="Argument">
            <stringProp name="Argument.name">userUidPrefix</stringProp>
            <stringProp name="Argument.value">perf-test-acct-</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userLoginPrefix" elementType="Argument">
            <stringProp name="Argument.name">userLoginPrefix</stringProp>
            <stringProp name="Argument.value">perf-</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="addUserAccounts" elementType="Argument">
            <stringProp name="Argument.name">addUserAccounts</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.desc">Attach user account associations</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="addUserAttributes" elementType="Argument">
            <stringProp name="Argument.name">addUserAttributes</stringProp>
            <stringProp name="Argument.value">true</stringProp>
            <stringProp name="Argument.desc">Attach user attributes</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Reset defaults" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">// reset default if properties are given
import java.text.SimpleDateFormat;

if (props.get(&quot;numberOfAccounts&quot;) != null) {
	vars.put(&quot;numberOfAccounts&quot;, props.get(&quot;numberOfAccounts&quot;));
	vars.put(&quot;accountOffset&quot;, props.get(&quot;accountOffset&quot;));
	vars.put(&quot;groupOffset&quot;, props.get(&quot;groupOffset&quot;));
	vars.put(&quot;accountPrefix&quot;, props.get(&quot;accountPrefix&quot;));
	vars.put(&quot;sourceCompanyId&quot;, props.get(&quot;sourceCompanyId&quot;));
	vars.put(&quot;minMaxTxnsPerAcct&quot;, props.get(&quot;minMaxTxnsPerAcct&quot;));
	vars.put(&quot;numOfThreads&quot;, props.get(&quot;numOfThreads&quot;));
	vars.put(&quot;threadMultiplier&quot;, props.get(&quot;threadMultiplier&quot;));
	vars.put(&quot;categorizeTransactions&quot;, props.get(&quot;categorizeTransactions&quot;));
	vars.put(&quot;categorizationPercent&quot;, props.get(&quot;categorizationPercent&quot;));
	vars.put(&quot;conduitFileDropPath&quot;, props.get(&quot;conduitFileDropPath&quot;));
	vars.put(&quot;suppressAlerts&quot;, props.get(&quot;suppressAlerts&quot;));
	vars.put(&quot;serverName&quot;, props.get(&quot;serverName&quot;));
	vars.put(&quot;userUidPrefix&quot;, props.get(&quot;userUidPrefix&quot;));
	vars.put(&quot;userLoginPrefix&quot;, props.get(&quot;userLoginPrefix&quot;));
}
if (&quot;false&quot;.equals(props.get(&quot;addUserAccounts&quot;))) {
	vars.put(&quot;addUserAccounts&quot;, &quot;false&quot;);
}
if (&quot;false&quot;.equals(props.get(&quot;addUserAttributes&quot;))) {
	vars.put(&quot;addUserAttributes&quot;, &quot;false&quot;);
}
if (vars.get(&quot;conduitFileDropPath&quot;).isEmpty()) {
	vars.put(&quot;conduitFileDropPath&quot;, System.getProperty(&quot;user.home&quot;));
}
if (props.get(&quot;fileDateString&quot;) != null) {
	vars.put(&quot;fileDate&quot;, props.get(&quot;fileDateString&quot;));
} else {
	vars.put(&quot;fileDate&quot;, new SimpleDateFormat(&quot;yyyyMMdd&quot;).format(new Date()));
}
</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptestnow</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(numOfGroups)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit Header" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

Date fd = new SimpleDateFormat(&quot;yyyyMMdd&quot;).parse(vars.get(&quot;fileDate&quot;));
if (fd == null) fd = new Date();

String fileDate = new SimpleDateFormat(&quot;yyyyMMdd&quot;).format(fd);
fileDate += &quot;-&quot; + new SimpleDateFormat(&quot;HHmmss&quot;).format(new Date());
String fileName = &quot;conduit-${sourceCompanyId}&quot; + 
    &quot;-users&quot; +
    &quot;-g&quot; + (vars.getIteration() + ${groupOffset}) +
    &quot;-c${numberOfAccounts}&quot; + 
    &quot;-&quot; + fileDate;

vars.put(&quot;filename&quot;, fileName);
String filePath = &quot;${conduitFileDropPath}/&quot; + fileName + &quot;.txt&quot;;
vars.put(&quot;filePath&quot;, filePath);

File file = new File(filePath);
FileWriter fw = new FileWriter(file);
BufferedWriter bw = new BufferedWriter(fw);

vars.put(&quot;acctCount&quot;, &quot;0&quot;);

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot; +
		&quot;&lt;conduit&gt;\n&quot; +
		&quot;  &lt;hdr&gt;\n&quot; +
		&quot;    &lt;ver&gt;2.6&lt;/ver&gt;\n&quot; +
		&quot;    &lt;rqid&gt;&quot; + fileDate + &quot;&lt;/rqid&gt;\n&quot; +
		&quot;  &lt;/hdr&gt;\n&quot; +
		&quot;  &lt;usrlst&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${numberOfAccounts}</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Add User &lt;usr/&gt;" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.util.Random;

long acctCount = ${acctCount};

String nbr = &quot;&quot; + (vars.getIteration()+${groupOffset}) + &quot;-&quot; + (acctCount+${accountOffset});
String digits = nbr.replaceAll(&quot;-&quot;,&quot;&quot;);
while (digits.length() &lt; 10) digits = digits + &quot;0&quot;;
String userUid = &quot;${userUidPrefix}&quot; + nbr;
String userLogin = &quot;${userLoginPrefix}&quot; + nbr;
String email = userLogin+&quot;@d3banking.com&quot;;
String phone = digits.substring(0,3)+&quot;-&quot;+digits.substring(3,6)+&quot;-&quot;+digits.substring(6,10);
String xml =
  &quot;    &lt;usr uid=\&quot;&quot; + userUid + &quot;\&quot; cuid=\&quot;${sourceCompanyId}\&quot;&gt;\n&quot; +
  &quot;      &lt;login&gt;&quot;+userLogin+&quot;&lt;/login&gt;\n&quot; +
  &quot;      &lt;txid&gt;&quot;+digits.substring(1,4)+&quot;-&quot;+digits.substring(4,6)+&quot;-&quot;+digits.substring(6,10)+&quot;&lt;/txid&gt;\n&quot; +
  &quot;      &lt;bpid&gt;bpid-&quot;+nbr+&quot;&lt;/bpid&gt;\n&quot; +
  &quot;      &lt;bpsts&gt;a&lt;/bpsts&gt;\n&quot; +
  &quot;      &lt;dob&gt;19&quot;+digits.substring(8,10)+&quot;-02-22&lt;/dob&gt;\n&quot; + 
  &quot;      &lt;txtp&gt;s&lt;/txtp&gt;\n&quot; +
  &quot;      &lt;lock&gt;f&lt;/lock&gt;\n&quot; +
  &quot;      &lt;m&gt;false&lt;/m&gt;\n&quot; +
  &quot;      &lt;enbl&gt;1&lt;/enbl&gt;\n&quot; +
  &quot;      &lt;emlopt&gt;0&lt;/emlopt&gt;\n&quot; +
  &quot;      &lt;g&gt;m&lt;/g&gt;\n&quot; +
  &quot;      &lt;crsc&gt;700&lt;/crsc&gt;\n&quot; +
  &quot;      &lt;crdt&gt;2013-09-01&lt;/crdt&gt;\n&quot; +
  &quot;      &lt;cls&gt;VALUED-CUSTOMER&lt;/cls&gt;\n&quot; +
  &quot;      &lt;enrl&gt;1&lt;/enrl&gt;\n&quot; +
  &quot;      &lt;psn&gt;\n&quot; +
  &quot;        &lt;fn&gt;FN&quot;+nbr+&quot;&lt;/fn&gt;\n&quot; +
  &quot;        &lt;ln&gt;LN&quot;+nbr+&quot;&lt;/ln&gt;\n&quot; +
  &quot;        &lt;paddr&gt;\n&quot; +
  &quot;          &lt;a1&gt;&quot;+digits.substring(0,5)+&quot; Main St&lt;/a1&gt;\n&quot; +
  &quot;          &lt;ct&gt;Denver&lt;/ct&gt;\n&quot; +
  &quot;          &lt;st&gt;CO&lt;/st&gt;\n&quot; +
  &quot;          &lt;pc&gt;&quot;+digits.substring(0,5)+&quot;&lt;/pc&gt;\n&quot; +
  &quot;        &lt;/paddr&gt;\n&quot; +
  &quot;      &lt;/psn&gt;\n&quot; +
  &quot;      &lt;usrcnctlst&gt;\n&quot; +
  &quot;        &lt;usrcnct uid=\&quot;ud-&quot; + nbr + &quot;-1\&quot;&gt;\n&quot; +
  &quot;          &lt;ctp&gt;phone&lt;/ctp&gt;\n&quot; +
  &quot;          &lt;lbl&gt;MOBILE&lt;/lbl&gt;\n&quot; +
  &quot;          &lt;val&gt;&quot;+phone+&quot;&lt;/val&gt;\n&quot; +
  &quot;          &lt;oob&gt;true&lt;/oob&gt;\n&quot; +
  &quot;          &lt;pri&gt;true&lt;/pri&gt;\n&quot; +
  &quot;          &lt;sms&gt;true&lt;/sms&gt;\n&quot; +
  &quot;        &lt;/usrcnct&gt;\n&quot; +
  &quot;        &lt;usrcnct uid=\&quot;ud-&quot; + nbr + &quot;-2\&quot;&gt;\n&quot; +
  &quot;          &lt;ctp&gt;email&lt;/ctp&gt;\n&quot; +
  &quot;          &lt;lbl&gt;PRIMARY&lt;/lbl&gt;\n&quot; +
  &quot;          &lt;val&gt;&quot;+email+&quot;&lt;/val&gt;\n&quot; +
  &quot;          &lt;pri&gt;true&lt;/pri&gt;\n&quot; +
  &quot;        &lt;/usrcnct&gt;\n&quot; +
  &quot;        &lt;usrcnct uid=\&quot;ud-&quot; + nbr + &quot;-3\&quot;&gt;\n&quot; +
  &quot;          &lt;ctp&gt;inbox&lt;/ctp&gt;\n&quot; +
  &quot;          &lt;lbl&gt;INBOX&lt;/lbl&gt;\n&quot; +
  &quot;          &lt;val&gt;inbox&lt;/val&gt;\n&quot; +
  &quot;        &lt;/usrcnct&gt;\n&quot; +
  &quot;      &lt;/usrcnctlst&gt;\n&quot;;
if (${addUserAttributes}) { 
  xml += 
  &quot;      &lt;alst&gt;\n&quot; +
  &quot;        &lt;a n=\&quot;MobileID\&quot;&gt;M&quot; + nbr + &quot;&lt;/a&gt;\n&quot; +
  &quot;        &lt;a n=\&quot;CheckOrderID\&quot;&gt;C&quot; + nbr + &quot;&lt;/a&gt;\n&quot; +
  &quot;        &lt;a n=\&quot;RSAID\&quot;&gt;R&quot; + nbr + &quot;&lt;/a&gt;\n&quot; +
  &quot;      &lt;/alst&gt;\n&quot;;
}

if (${addUserAccounts}) {
  xml +=  &quot;      &lt;usracctlst&gt;\n&quot;;

  int threadCount = ${numOfThreads};
  for (int tc = 1 ; tc &lt;= threadCount ; tc ++){
    String accountUid = &quot;${accountPrefix}&quot; + nbr + &quot;-&quot; + tc;
    xml += &quot;        &lt;usracct a=\&quot;associate\&quot; auid=\&quot;&quot; + accountUid + &quot;\&quot; /&gt;\n&quot;;
  }
  xml += &quot;      &lt;/usracctlst&gt;\n&quot;;
}

xml += &quot;    &lt;/usr&gt;\n\n&quot;;

vars.put(&quot;xml&quot;, xml);
vars.put(&quot;acctCount&quot;, &quot;&quot; + (acctCount + 1));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Write out" enabled="true">
            <stringProp name="BeanShellSampler.query">
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;


String xml = vars.get(&quot;xml&quot;);

File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file, true);
BufferedWriter bw = new BufferedWriter(fw);

bw.write(xml);
bw.flush();
bw.close();
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit End" enabled="true">
          <stringProp name="BeanShellSampler.query">
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file, true);
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;/usrlst&gt;\n&lt;/conduit&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Rename Conduit Files" enabled="true">
          <stringProp name="BeanShellSampler.query">
String path = &quot;${conduitFileDropPath}/&quot;;
String name = &quot;${filename}&quot;;

File txtFile = new File(path+name+&quot;.txt&quot;);	
File xmlFile = new File(path+name+&quot;.xml&quot;);

txtFile.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
