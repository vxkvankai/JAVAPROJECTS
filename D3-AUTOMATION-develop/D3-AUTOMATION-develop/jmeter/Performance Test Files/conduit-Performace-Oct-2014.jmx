<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.5" jmeter="2.10 r1533061">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1412786435000</longProp>
        <longProp name="ThreadGroup.end_time">1412786435000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Sql Server DB Connection" enabled="false">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};databaseName=${dbName}</stringProp>
          <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CREATE accounts only" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Sql Server DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};databaseName=${dbName}</stringProp>
          <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="CreateAccts" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="CreateFilesWithAcctsAndDrop" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};

String tDay =  new SimpleDateFormat(&quot;ddMMhhmm&quot;).format(new Date());
long tstamp = System.currentTimeMillis();

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -300);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-&quot;+tstamp + &quot;-accts-&quot; + numOfAccts+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
//		&quot;    &lt;parse&gt;true&lt;/parse&gt;\r\n&quot; + 
//		&quot;    &lt;validate&gt;false&lt;/validate&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
String[] products = new String[]{&quot;DEPOSIT_CHECKING&quot;,&quot;DEPOSIT_SAVINGS&quot;,&quot;CREDIT_CARD&quot;};
for (int c = 0; c&lt;numOfAccts; c++)
{
	tDay=&quot;0&quot;;
	
	String puid = products[new Random().nextInt(3)];
	vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-&quot;+ tDay + &quot;-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
 
			&quot;      &lt;produid&gt;&quot; + puid + &quot;&lt;/produid&gt;\r\n&quot; + 
			&quot;      &lt;nm&gt;Performance Test Acct&quot;+ &quot;0&quot; + &quot;-${__threadNum}-&quot;+(c+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;      &lt;rttn&gt;123456789&lt;/rttn&gt;\r\n&quot; + 
			&quot;      &lt;nbr&gt;${__threadNum}&quot;+(c+1)+&quot;&lt;/nbr&gt;\r\n&quot; + 
			&quot;      &lt;bal&gt;2500.50&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;sts&gt;open&lt;/sts&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot; + 
			&quot;      &lt;cc&gt;USD&lt;/cc&gt;\r\n&quot; + 
			&quot;      &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\r\n&quot; +
	 		&quot;    &lt;/acct&gt;\r\n&quot;);
}

bw.write( 
		&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UpdateNoAcctNumber" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-yy-hh-mm&quot;);
String tDay =  sdf.format(new Date());
long tstamp = System.currentTimeMillis();

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-&quot; + tstamp + &quot;-accts-&quot;+ numOfAccts + &quot;-&quot; + &quot;t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);

for (int c = 0; c&lt;numOfAccts; c++)
{

	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-0-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;      &lt;nm&gt;Performance Test Acct0-${__threadNum}-&quot;+(c+1)+&quot;&lt;/nm&gt;\r\n&quot; +  
			&quot;      &lt;bal&gt;2500.500000&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;sts&gt;open&lt;/sts&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot; + 
			&quot;      &lt;cc&gt;USD&lt;/cc&gt;\r\n&quot; +  
			&quot;      &lt;opndt&gt;2013-11-12&lt;/opndt&gt;\r\n&quot;);		
		bw.write(&quot;    &lt;/acct&gt;\r\n&quot;);	
}

bw.write( 
		&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="UpdateNoAcctNumberWithTransactions" enabled="false">
            <stringProp name="BeanShellSampler.query">import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

String fiName = &quot;${source_company_id}&quot;;
String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;

int numOfAccts = ${numOfAccts};
int numOfTxnsPerAccts = ${numOfTxnsPerAccts};
int threadNum = ${numOfThreads};
boolean addTxns = ${addTxns};

SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd-M-hh-mm&quot;);
String tDay =  sdf.format(new Date());
//long tstamp = System.currentTimeMillis();
long tstampLong = System.currentTimeMillis();
String tstamp = Long.toString(tstampLong);	
vars.put(&quot;tstamp&quot;, tstamp);

sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());

Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());

String fileName = &quot;conduit-&quot;+tstamp+&quot;-accts-&quot;+numOfAccts+&quot;-txns-&quot;+numOfTxnsPerAccts+&quot;-&quot;+endDate+&quot;-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
//vars.put(&quot;filePartialName&quot;, &quot;conduit-accts-&quot;+numOfAccts+&quot;-&quot;+endDate+&quot;-&quot;+tstamp);
String filePath = conduitProccessDir + fileName + &quot;.txt&quot;;
File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
String[] products = new String[]{&quot;DEPOSIT_CHECKING&quot;,&quot;DEPOSIT_SAVINGS&quot;,&quot;CREDIT_CARD&quot;};
for (int c = 0; c &lt; numOfAccts; c++)
{
//	tDay=&quot;0&quot;;
	
	String puid = products[new Random().nextInt(3)];
	vars.put(&quot;partialAcctName&quot;, &quot;Performance Test Acct&quot;+ tDay + &quot;-&quot;);
	bw.write(
			&quot;    &lt;acct uid=\&quot;acct-uid-0-${__threadNum}-&quot;+(c+1)+&quot;\&quot; cuid=\&quot;&quot;+fiName+&quot;\&quot;&gt;\r\n&quot; + 
			&quot;      &lt;bal&gt;2500.500000&lt;/bal&gt;\r\n&quot; + 
			&quot;      &lt;avbal&gt;1050.000000&lt;/avbal&gt;\r\n&quot;);
	if (addTxns)
	{	
		bw.write(
			&quot;      &lt;txnlst&gt;\r\n&quot;);
		for (int txn = 0; txn &lt; numOfTxnsPerAccts; txn++)
		{
 			//vars.put(&quot;partialTxnName&quot;, &quot;Performance Test Txn&quot;+ tDay+ &quot;-&quot;);
 			long postingSeq = (c+1)*10+txn+1;
			bw.write(
			&quot;        &lt;txn uid=\&quot;txn-uid-&quot;+ tDay+ &quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;\&quot;&quot; +
			&quot; tp=\&quot;d\&quot; am=\&quot;800.00\&quot; mc=\&quot;5812\&quot; od=\&quot;&quot;+endDate+&quot;\&quot;&quot; +
			&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;&quot;+postingSeq+&quot;\&quot;&quot; +
			&quot; &gt;\r\n&quot; + 
			&quot;          &lt;nm&gt;Performance Test Txn-&quot;+tDay+&quot;-${__threadNum}-&quot;+(c+1)+&quot;-&quot;+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;		 &lt;mm&gt;Transaction Memo &quot; + tstamp + &quot;&lt;/mm&gt;&quot; +	
			&quot;        &lt;/txn&gt;\r\n&quot;);
		}					
		bw.write(
			&quot;      &lt;/txnlst&gt;\r\n&quot; +
		     &quot;    &lt;/acct&gt;\r\n&quot;);
	}else{
		bw.write(
			&quot;    &lt;/acct&gt;\r\n&quot;);
	}
}
bw.write( 	&quot;  &lt;/acctlst&gt;\r\n&quot;);
bw.write(&quot;&lt;/conduit&gt;&quot;);
bw.close();	
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
            <stringProp name="BeanShellSampler.query">String conduitProccessDir = &quot;${conduitFileDropPath}&quot;;
String filePath = conduitProccessDir  + &quot;${filename}.txt&quot;;
File file = new File(filePath);	
String xmlFilePath = conduitProccessDir + &quot;${filename}.xml&quot;;
File xmlFile = new File(xmlFilePath);
file.renameTo(xmlFile);
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="_WaitForConduitFileToProcess" enabled="true">
            <stringProp name="BeanShellSampler.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filename}.xml&quot;);
while (file.exists()) 
{
if(counter &gt; 100000000){
       break;
}
counter = counter + 1;
Thread.sleep(1000);
}
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="CheckForConduitFileToBeProcessed" enabled="true">
              <stringProp name="BeanShellAssertion.query">int counter = 0;
File file = new File(&quot;${conduitFileDropPath}${filePartialName}${__threadNum}.xml&quot;);
while (file.exists()) 
{
Failure= true ;
   	FailureMessage = &quot;File has not been proccessed yet! Increase the wait time!&quot; ;
	break;
}
</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ADD TXNS (to existing accounts)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="databaseToUse" elementType="Argument">
              <stringProp name="Argument.name">databaseToUse</stringProp>
              <stringProp name="Argument.value">SqlServer</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numOfExistingAccountsToUpdate" elementType="Argument">
              <stringProp name="Argument.name">numOfExistingAccountsToUpdate</stringProp>
              <stringProp name="Argument.value">500000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numOfTxnsPerAccts" elementType="Argument">
              <stringProp name="Argument.name">numOfTxnsPerAccts</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numOfThreads" elementType="Argument">
              <stringProp name="Argument.name">numOfThreads</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="threadMultiplier" elementType="Argument">
              <stringProp name="Argument.name">threadMultiplier</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="CategorizationFlagSetTo" elementType="Argument">
              <stringProp name="Argument.name">CategorizationFlagSetTo</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Sql Server" enabled="true">
          <stringProp name="IfController.condition">&quot;${databaseToUse}&quot; == &quot;SqlServer&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Sql Server DB Connection" enabled="true">
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};databaseName=${dbName}</stringProp>
            <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="password">${dbPassword}</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <stringProp name="username">${dbUserName}</stringProp>
          </JDBCDataSource>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If My Sql" enabled="true">
          <stringProp name="IfController.condition">&quot;${databaseToUse}&quot; == &quot;MySql&quot;</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="MySql DB Connection" enabled="true">
            <stringProp name="dataSource">Connection-2</stringProp>
            <stringProp name="poolMax">10</stringProp>
            <stringProp name="timeout">10000</stringProp>
            <stringProp name="trimInterval">60000</stringProp>
            <boolProp name="autocommit">true</boolProp>
            <stringProp name="transactionIsolation">DEFAULT</stringProp>
            <boolProp name="keepAlive">true</boolProp>
            <stringProp name="connectionAge">5000</stringProp>
            <stringProp name="checkQuery">Select 1</stringProp>
            <stringProp name="dbUrl">jdbc:mysql://localhost:3306/d3v2</stringProp>
            <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
            <stringProp name="username">d3</stringProp>
            <stringProp name="password">d3</stringProp>
          </JDBCDataSource>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Account Range" enabled="true">
          <stringProp name="BeanShellSampler.query">
vars.put(&quot;acctIdFrom&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*(${__threadNum}-1)+1)}&quot;);
vars.put(&quot;acctIdTo&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*${__threadNum})}&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit Header" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMMddhhmm&quot;);
String tDay =  sdf.format(new Date());
sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());
Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());
Boolean categorizationFlag = ${CategorizationFlagSetTo};
String catFlag = null;
if (categorizationFlag == false){
	catFlag = &quot;f&quot;;
	}else {
		catFlag = &quot;t&quot;;
	}


String tstamp = &quot;&quot;+System.currentTimeMillis();	
String fileName = &quot;conduit-&quot;+tstamp+ &quot;-cat-&quot; + catFlag + &quot;-m${threadMultiplier}-accts-${numOfExistingAccountsToUpdate}-txns-${numOfTxnsPerAccts}-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = &quot;${conduitFileDropPath}&quot; + fileName + &quot;.txt&quot;;
vars.put(&quot;filePath&quot;, filePath);

File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;acctlst&gt;\r\n&quot;);
bw.flush();
bw.close();

vars.put(&quot;haveAccounts&quot;, &quot;true&quot;);
vars.put(&quot;txnCount&quot;, &quot;0&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${haveAccounts}</stringProp>
        </WhileController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Sql Server" enabled="true">
            <stringProp name="IfController.condition">&quot;${databaseToUse}&quot; == &quot;SqlServer&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Sql Server-QueryGetSourceAccountIDFromDB" enabled="true">
              <stringProp name="dataSource">Connection-1</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id OFFSET ${accountPageNo} ROWS FETCH NEXT ${accountPageSize} ROWS ONLY;</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">Acct_source_id</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If My Sql" enabled="true">
            <stringProp name="IfController.condition">&quot;${databaseToUse}&quot; == &quot;MySql&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="MySql-QueryGetSourceAccountIDFromDB" enabled="true">
              <stringProp name="dataSource">Connection-2</stringProp>
              <stringProp name="queryType">Prepared Select Statement</stringProp>
              <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id limit ${accountPageNo},${accountPageSize};</stringProp>
              <stringProp name="queryArguments"></stringProp>
              <stringProp name="queryArgumentsTypes"></stringProp>
              <stringProp name="variableNames">Acct_source_id</stringProp>
              <stringProp name="resultVariable"></stringProp>
              <stringProp name="queryTimeout"></stringProp>
            </JDBCSampler>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Update accounts with transactions" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;
import org.junit.Test;
import org.xml.sax.SAXException;

vars.put(&quot;accountPageNo&quot;, &quot;&quot;+(new Integer(&quot;${accountPageNo}&quot;)+new Integer(&quot;${accountPageSize}&quot;)));

String tDay = new SimpleDateFormat(&quot;yyMMddhhmm&quot;).format(new Date());
String endDate = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;).format(new Date());

File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);

int size = ${accountPageSize};
int txSize = ${numOfTxnsPerAccts};
String[] mcc = {&quot;2741&quot;,&quot;5192&quot;,&quot;5812&quot;,&quot;5813&quot;,&quot;5814&quot;,&quot;5942&quot;,&quot;5945&quot;,&quot;5946&quot;,&quot;5947&quot;,&quot;5963&quot;,&quot;5964&quot;,&quot;5965&quot;,&quot;5968&quot;,&quot;5973&quot;,&quot;5978&quot;,&quot;5992&quot;,&quot;5994&quot;,&quot;5995&quot;,&quot;6010&quot;,&quot;6012&quot;,&quot;6300&quot;,&quot;6399&quot;,&quot;7012&quot;,&quot;7261&quot;,&quot;7277&quot;,&quot;7333&quot;,&quot;7338&quot;,&quot;7395&quot;,&quot;7699&quot;,&quot;9311&quot;,&quot;9399&quot;,&quot;0742&quot;,&quot;4511&quot;,&quot;4722&quot;,&quot;3023&quot;,&quot;3058&quot;,&quot;3061&quot;,&quot;3219&quot;,&quot;3357&quot;,&quot;3649&quot;,&quot;5047&quot;,&quot;5122&quot;,&quot;5912&quot;,&quot;5975&quot;,&quot;5976&quot;,&quot;5976&quot;,&quot;7011&quot;,&quot;8011&quot;,&quot;8011&quot;,&quot;8021&quot;,&quot;8031&quot;,&quot;8041&quot;,&quot;8041&quot;,&quot;8042&quot;,&quot;8043&quot;,&quot;8049&quot;,&quot;8050&quot;,&quot;8062&quot;,&quot;8062&quot;,&quot;8071&quot;,&quot;8071&quot;,&quot;8099&quot;};

for (int varIdx = 1; varIdx &lt;= size; varIdx++)
{
	if (vars.get(&quot;Acct_source_id_&quot;+varIdx) == null) {
		vars.put(&quot;haveAccounts&quot;, &quot;false&quot;);
		break;
	}
	bw.write(
			&quot;    &lt;acct uid=\&quot;&quot;+vars.get(&quot;Acct_source_id_&quot;+varIdx)+&quot;\&quot;&gt;\r\n&quot; +
			&quot;      &lt;avbal&gt;&quot;+(new Random().nextInt(9999))+&quot;.50&lt;/avbal&gt;\r\n&quot; +
			&quot;      &lt;bal&gt;&quot;+(new Random().nextInt(9999))+&quot;.75&lt;/bal&gt;\r\n&quot;);

	if(txSize &gt; 0){
		bw.write(&quot;      &lt;txnlst&gt;\r\n&quot;);
		for (int txn = 0; txn &lt; txSize; txn++)
		{
			// 0202 5812 cat code
			long postingSeq = (varIdx+1)*10+txn+1;
			String mcCode = mcc[new Random().nextInt(mcc.length)];
	//		mcCode = &quot;2741&quot;;
			bw.write(
			&quot;         &lt;txn uid=\&quot;&quot;+ tDay+ &quot;-${__threadNum}-&quot;+(varIdx+1)+&quot;-&quot;+(txn+1)+&quot;\&quot;&quot; +
			&quot; tp=\&quot;d\&quot; am=\&quot;&quot;+(new Random().nextInt(999))+&quot;.00\&quot; mc=\&quot;&quot;+mcCode+&quot;\&quot; od=\&quot;&quot;+endDate+&quot;\&quot;&quot; +
			&quot; pd=\&quot;&quot;+endDate+&quot;\&quot; pn=\&quot;0\&quot; ps=\&quot;&quot;+postingSeq+&quot;\&quot;&quot; +
			&quot; &gt;\r\n&quot; + 
			&quot;           &lt;nm&gt;Performance Test Txn-&quot;+tDay+&quot;-${__threadNum}-&quot;+(varIdx+1)+&quot;-&quot;+(txn+1)+&quot;&lt;/nm&gt;\r\n&quot; + 
			&quot;         &lt;/txn&gt;\r\n&quot;);
			
			vars.put(&quot;txnCount&quot;, &quot;&quot;+(new Integer(&quot;${txnCount}&quot;)+1));
		}				
		bw.write(&quot;      &lt;/txnlst&gt;\r\n&quot;);
	}
	bw.write(&quot;     &lt;/acct&gt;\r\n&quot;);
}

bw.flush();
bw.close();		
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit End" enabled="true">
          <stringProp name="BeanShellSampler.query">
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;/acctlst&gt;&lt;/conduit&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
          <stringProp name="BeanShellSampler.query">
String path = &quot;${conduitFileDropPath}&quot;;
String name = &quot;${filename}&quot;;

File txtFile = new File(path+name+&quot;.txt&quot;);	
File xmlFile = new File(path+name+&quot;.xml&quot;);

txtFile.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CREATE USERS-Part 2 " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Sql Server DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};databaseName=${dbName}</stringProp>
          <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="numOfUsersToAdd" elementType="Argument">
              <stringProp name="Argument.name">numOfUsersToAdd</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="numOfAcctsPerUserToAssociate" elementType="Argument">
              <stringProp name="Argument.name">numOfAcctsPerUserToAssociate</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Account Range" enabled="true">
          <stringProp name="BeanShellSampler.query">vars.put(&quot;acctIdFrom&quot;,&quot;${__jexl(${numOfUsersToAdd}*${numOfAcctsPerUserToAssociate}*(${__threadNum}-1)+1)}&quot; );
vars.put(&quot;acctIdTo&quot;, &quot;${__jexl(${numOfUsersToAdd}*${numOfAcctsPerUserToAssociate}*${__threadNum})}&quot;);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit Header" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMMddhhmm&quot;);
String tDay =  sdf.format(new Date());
sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());
Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());


String tstamp = &quot;&quot;+System.currentTimeMillis();	
String fileName = &quot;conduit-&quot;+tstamp+&quot;-User-${numOfUsersToAdd}-AcctsToAssociate-${numOfAcctsPerUserToAssociate}-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = &quot;${conduitFileDropPath}&quot; + fileName + &quot;.txt&quot;;
vars.put(&quot;filePath&quot;, filePath);

File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;usrlst&gt;\r\n&quot;);
bw.flush();
bw.close();

vars.put(&quot;addMoreUsers&quot;, &quot;true&quot;);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end"></stringProp>
          <stringProp name="CounterConfig.incr"></stringProp>
          <stringProp name="CounterConfig.name">numOfAccountsAlreadyAdded</stringProp>
          <stringProp name="CounterConfig.format"></stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${addMoreUsers}</stringProp>
        </WhileController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Sql Server-QueryGetSourceAccountIDFromDB" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id OFFSET ${accountPageNo} ROWS FETCH NEXT ${accountPageSize} ROWS ONLY;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">Acct_source_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="MySql-QueryGetSourceAccountIDFromDB" enabled="false">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id limit ${accountPageNo},${accountPageSize};</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">Acct_source_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Create Users and associate accounts" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import javax.xml.parsers.ParserConfigurationException;


vars.put(&quot;accountPageNo&quot;, &quot;&quot;+(new Integer(&quot;${accountPageNo}&quot;)+new Integer(&quot;${accountPageSize}&quot;)));
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);

int numberOfAccountsToAssociate = ${numOfAcctsPerUserToAssociate}; 
int numOfUsersToAdd = ${numOfUsersToAdd};

String tDay = new SimpleDateFormat(&quot;yyMMddhhmm&quot;).format(new Date());

String[] fi = {&quot;fi1&quot;,&quot;branch-1-1&quot;,&quot;branch-1-2&quot;,&quot;fi2&quot;,&quot;branch-2-1&quot;,&quot;fi3&quot;,&quot;branch-3-1&quot;};
String fiName = fi[new Random().nextInt(fi.length)];

int size = ${accountPageSize};
int varId=1;

int count = ${numOfAccountsAlreadyAdded};

for(int numOfUsers=0; numOfUsers&lt;size/numberOfAccountsToAssociate; numOfUsers++){	

				 if(count&gt;${__jexl(${numOfUsersToAdd}*${numOfAcctsPerUserToAssociate})}){
						vars.put(&quot;addMoreUsers&quot;, &quot;false&quot;);
						break;
 				}
		
	bw.write(
			&quot;    &lt;usr uid=\&quot;usr-uid-&quot;+ tDay + &quot;-${__threadNum}&quot;+ numOfUsers+ count+&quot;\&quot; cuid=\&quot;&quot; + fiName + &quot;\&quot;&gt;\r\n&quot; + 
			&quot;    &lt;login&gt;usr-&quot; + tDay + &quot;-${__threadNum}&quot; + numOfUsers + count + &quot;&lt;/login&gt;\r\n&quot; +
			&quot;	&lt;txid&gt;112233&quot; + &quot;${__threadNum}&quot; + numOfUsers + count+ &quot;&lt;/txid&gt;\r\n&quot; +
			&quot;	&lt;txtp&gt;s&lt;/txtp&gt;\r\n&quot; +
			&quot;	&lt;enrl&gt;true&lt;/enrl&gt;\r\n&quot; +
			&quot;	&lt;dob&gt;1980-10-25&lt;/dob&gt;\r\n&quot; +
			&quot;	&lt;psn&gt;\r\n&quot; +
			&quot;		&lt;fn&gt;UserFirstName&lt;/fn&gt;\r\n&quot; +
			&quot;		&lt;ln&gt;UserLastName&lt;/ln&gt;\r\n&quot; +
			&quot;		&lt;pem&gt;primaryEmail@d3banking.com&lt;/pem&gt;\r\n&quot; +
			&quot;		&lt;aem&gt;alternateEmail@d3banking.com&lt;/aem&gt;\r\n&quot; +
			&quot;		&lt;hph&gt;3031112222&lt;/hph&gt;\r\n&quot; +
			&quot;		&lt;wph&gt;3034445555&lt;/wph&gt;\r\n&quot; +
			&quot;		&lt;paddr&gt;\r\n&quot; +
			&quot;			&lt;a1&gt;1234 Street Address -1&lt;/a1&gt;\r\n&quot; +
			&quot;			&lt;a2&gt;Street Address -2 &lt;/a2&gt;\r\n&quot; +
			&quot;			&lt;ct&gt;Englewood&lt;/ct&gt;\r\n&quot; +
			&quot;			&lt;st&gt;CO&lt;/st&gt;\r\n&quot; +
			&quot;			&lt;pc&gt;80109&lt;/pc&gt;\r\n&quot; +
			&quot;		&lt;/paddr&gt;\r\n&quot; +
			&quot;	&lt;/psn&gt;\r\n&quot; +
			&quot;	&lt;usracctlst&gt;\r\n&quot;) ;
									 
			for(int x=varId;x&lt;numberOfAccountsToAssociate+varId;x++){
			
 				if (vars.get(&quot;Acct_source_id_&quot;+x) == null) {					
				break;
				}
				bw.write(
					&quot;	&lt;usracct auid=\&quot;&quot;+ vars.get(&quot;Acct_source_id_&quot;+ x) + &quot;\&quot; a=\&quot;a\&quot;/&gt;\r\n&quot; 
				
					);					
			}

			bw.write( 
				&quot;  	&lt;/usracctlst&gt;\r\n&quot; +
				&quot;   &lt;/usr&gt;\r\n&quot; );

				varId = varId + numberOfAccountsToAssociate;
				count=count+numberOfAccountsToAssociate;
				vars.put(&quot;numOfAccountsAlreadyAdded&quot;, &quot;&quot;+count);	


}

bw.flush();
bw.close();		
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit End" enabled="true">
          <stringProp name="BeanShellSampler.query">
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;/usrlst&gt;&lt;/conduit&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
          <stringProp name="BeanShellSampler.query">
String path = &quot;${conduitFileDropPath}&quot;;
String name = &quot;${filename}&quot;;

File txtFile = new File(path+name+&quot;.txt&quot;);	
File xmlFile = new File(path+name+&quot;.xml&quot;);

txtFile.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="USER MIGRATION" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${numOfThreads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1360810051000</longProp>
        <longProp name="ThreadGroup.end_time">1360810051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Sql Server DB Connection" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">Connection-1</stringProp>
          <stringProp name="dbUrl">jdbc:jtds:sqlserver:/${dbURL};databaseName=${dbName}</stringProp>
          <stringProp name="driver">net.sourceforge.jtds.jdbc.Driver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">${dbPassword}</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">${dbUserName}</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="NumOfUserMigrationElementsToInsert" elementType="Argument">
              <stringProp name="Argument.name">NumOfUserMigrationElementsToInsert</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="maxNumOfAlertsToInsertPerUser" elementType="Argument">
              <stringProp name="Argument.name">maxNumOfAlertsToInsertPerUser</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">Max Value allowed = 5</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Host ID Range" enabled="true">
          <stringProp name="BeanShellSampler.query">
//vars.put(&quot;hostIdFrom&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*(${__threadNum}-1)+1)}&quot;);
//vars.put(&quot;hostIdTo&quot;, &quot;${__jexl(${numOfExistingAccountsToUpdate}*${__threadNum})}&quot;);


switch (${__threadNum}) {
	case 1:
		vars.put(&quot;hostIdFrom&quot;, &quot;1&quot;);
		vars.put(&quot;hostIdTo&quot;, &quot;${NumOfUserMigrationElementsToInsert}&quot;);
		break;
	case 2:
		vars.put(&quot;hostIdFrom&quot;, &quot;(${NumOfUserMigrationElementsToInsert}+1)&quot;);
		vars.put(&quot;hostIdTo&quot;, &quot;(${NumOfUserMigrationElementsToInsert}*2)&quot;);
		break;
	case 3:
		vars.put(&quot;hostIdFrom&quot;, &quot;21&quot;);
		vars.put(&quot;hostIdTo&quot;, &quot;30&quot;);
		break;
	case 4:
		vars.put(&quot;hostIdFrom&quot;, &quot;31&quot;);
		vars.put(&quot;hostIdTo&quot;, &quot;40&quot;);
		break;
	}
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit Header" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import java.io.BufferedWriter;
import java.io.File;

SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyMMddhhmm&quot;);
String tDay =  sdf.format(new Date());
sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
String endDate =  sdf.format(new Date());
Calendar cal = Calendar.getInstance();
cal.setTime(new Date());
cal.add(Calendar.DATE, -5);
String bgnDate =  sdf.format(cal.getTime());


String tstamp = &quot;&quot;+System.currentTimeMillis();	
String fileName = &quot;conduit-&quot;+tstamp+&quot;-userMig-${NumOfUserMigrationElementsToInsert}-t${__threadNum}&quot;;
vars.put(&quot;filename&quot;, fileName);
String filePath = &quot;${conduitFileDropPath}&quot; + fileName + &quot;.txt&quot;;
vars.put(&quot;filePath&quot;, filePath);

File file = new File(filePath);
FileWriter fw = new FileWriter(file.getAbsoluteFile());
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\r\n&quot; + 
		&quot;&lt;conduit&gt;\r\n&quot; + 
		&quot;  &lt;hdr&gt;\r\n&quot; + 
		&quot;    &lt;ver&gt;2.0&lt;/ver&gt;\r\n&quot; + 
		&quot;    &lt;rqid&gt;&quot;+tstamp+&quot;&lt;/rqid&gt;\r\n&quot; + 
		&quot;	&lt;auth u=\&quot;user\&quot; p=\&quot;password\&quot;/&gt;\r\n&quot; + 
		&quot;    &lt;txndtrng bdt=\&quot;&quot;+bgnDate+&quot;\&quot; edt=\&quot;&quot;+endDate+&quot;\&quot;/&gt;\r\n&quot; + 
		&quot;  &lt;/hdr&gt;\r\n&quot; + 
		&quot;  &lt;usrmiglst&gt;\r\n&quot;);
bw.flush();
bw.close();

vars.put(&quot;haveHostId&quot;, &quot;true&quot;);

vars.put(&quot;totalAlerts&quot;, &quot;&quot; + (new Integer(0)));


</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
          <stringProp name="WhileController.condition">${haveHostId}</stringProp>
        </WhileController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Sql Server-Query - Get host_id from database" enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select host_id from d3_user where deleted &lt;&gt; 1 and id between ${hostIdFrom} and ${hostIdTo} order by id offset ${hostIdPageNo} rows fetch next 1 rows only;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">host_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="SqlServer-Query - Get source_account_id " enabled="true">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id in
(select account_id from user_account where user_id in
(select id from d3_user where host_id = &apos;${host_id_1}&apos;))


</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">source_account_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="MySql-QueryGetSourceAccountIDFromDB" enabled="false">
            <stringProp name="dataSource">Connection-1</stringProp>
            <stringProp name="queryType">Prepared Select Statement</stringProp>
            <stringProp name="query">select source_account_id from d3_account where deleted &lt;&gt; 1 and id between ${acctIdFrom} and ${acctIdTo} order by id limit ${accountPageNo},${accountPageSize};</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames">Acct_source_id</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
          </JDBCSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="User Migration Element" enabled="true">
            <stringProp name="BeanShellSampler.query">import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Random;
import org.xml.sax.SAXException;
import java.io.BufferedWriter;
import java.io.File;


File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);

String tDay = new SimpleDateFormat(&quot;MMddhhmmss&quot;).format(new Date());
int increment = ${__counter(true,counter)};
//vars.put(&quot;increment&quot;, &quot;&quot;+increment);


vars.put(&quot;hostIdPageNo&quot;, &quot;&quot;+(new Integer(&quot;${hostIdPageNo}&quot;)+1));
int getPageNum = new Integer(vars.get(&quot;hostIdPageNo&quot;));
String[] catType = {&quot;expense&quot;, &quot;income&quot;};

String[] alert1Freq = {&quot;always&quot;,&quot;onetime&quot;,&quot;daily&quot;,&quot;weekly&quot;,&quot;monthly&quot;,&quot;quarterly&quot;,&quot;annually&quot;,&quot;semimonthly&quot;,&quot;semiannually&quot;};

${__Random(1,${source_account_id_#}, random)};
int maxAlertsToInsertPerUser = ${maxNumOfAlertsToInsertPerUser};
int numOfAlertsForCurrentUser = new Random().nextInt(maxAlertsToInsertPerUser+1);
System.out.println(numOfAlertsForCurrentUser);




	String alert1a =    &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1a\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;balance.threshold&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Balance Threshold Alert&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;always&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;accountUid\&quot;&gt;${__V(source_account_id_${random})}&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;operator\&quot;&gt;LT&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold\&quot;&gt;&quot; + (new Random().nextInt(9999)) + &quot;.0000&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

			
	   String alert1b = &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1b\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;balance.threshold&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Balance Threshold Alert&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;always&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;accountUid\&quot;&gt;${__V(source_account_id_${random})}&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;operator\&quot;&gt;GT&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold\&quot;&gt;&quot; + (new Random().nextInt(9999)) + &quot;.0000&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert2a =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2a\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;periodic.balance&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Periodic Balance (Weekly)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;weekly&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;accountUid\&quot;&gt;${__V(source_account_id_${random})}&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;freqAttr1\&quot;&gt;2&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert2b =   &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2b\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;periodic.balance&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Periodic Balance (Monthly)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;monthly&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;accountUid\&quot;&gt;${__V(source_account_id_${random})}&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;freqAttr1\&quot;&gt;10&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;


	 String alert3 =   &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-3\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;check.number.cleared&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Check Number Cleared&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;onetime&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;accountUid\&quot;&gt;${__V(source_account_id_${random})}&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;check.number\&quot;&gt;&quot; + (new Random().nextInt(9999)) + &quot;&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;


	  String alert4 =   &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-4\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;credit.deposit&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Credit Deposit/Credit&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;always&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;accountUid\&quot;&gt;${__V(source_account_id_${random})}&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	String alert5a   =   &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-5a\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;transaction.merchant&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Transaction Merchant&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;always&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;merchant\&quot;&gt;Walmart&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert5b =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-5b\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;transaction.merchant&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Transaction Merchant&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;always&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;merchant\&quot;&gt;Target&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert6a =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-6a\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;account.reminder&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Account Reminder (MONTHY)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;monthly&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;freqAttr1\&quot;&gt;5&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;reminder.string\&quot;&gt;This is a reminder text&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert6b =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-6b\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;account.reminder&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Account Reminder (QUARTERLY)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;quarterly&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;freqAttr1\&quot;&gt;2&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;freqAttr2\&quot;&gt;16&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;reminder.string\&quot;&gt;This is a reminder text&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert6c =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-6c\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;account.reminder&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Account Reminder (ANNUALLY)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;annually&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;freqAttr1\&quot;&gt;3&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;freqAttr2\&quot;&gt;17&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;reminder.string\&quot;&gt;This is a reminder text&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert7a =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-7a\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;budget.total.threshold&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Budget Total Threshold (AMOUNT)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;daily&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold.attr\&quot;&gt;AMOUNT&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold.type\&quot;&gt;APPROACH&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold\&quot;&gt;&quot; + (new Random().nextInt(9999)) + &quot;.0000&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert7b =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-7b\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;budget.total.threshold&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Budget Total Threshold (PERCENT)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;daily&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold.attr\&quot;&gt;PERCENT&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold.type\&quot;&gt;APPROACH&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold\&quot;&gt;&quot; + (new Random().nextInt(9999)) + &quot;.0000&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;
					
	  String alert8 =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-8\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;transfer.failure&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Transfer Failure&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;always&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	  String alert9a =  &quot;			&lt;alert uid=\&quot;alert-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-9a\&quot;&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;budget.category.threshold&lt;/tp&gt;\r\n&quot; +
					&quot;				&lt;desc&gt;Budget Category Threshold (AMOUNT)&lt;/desc&gt;\r\n&quot; +
					&quot;				&lt;enbl&gt;1&lt;/enbl&gt;\r\n&quot; +
					&quot;				&lt;freq&gt;daily&lt;/freq&gt;\r\n&quot; +
					&quot;				&lt;destlst&gt;\r\n&quot; +
					&quot;					&lt;dest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;/&gt;\r\n&quot; +
					&quot;				&lt;/destlst&gt;\r\n&quot; +
					&quot;				&lt;alst&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;categoryUid\&quot;&gt;cat-uid-&quot; + tDay + &quot;-${__threadNum}&quot; + &quot;-&quot; + increment + &quot;&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold.attr\&quot;&gt;AMOUNT&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold.type\&quot;&gt;APPROACH&lt;/a&gt;\r\n&quot; +
					&quot;					&lt;a n=\&quot;threshold\&quot;&gt;&quot; + (new Random().nextInt(9999)) + &quot;.0000&lt;/a&gt;\r\n&quot; +
					&quot;				&lt;/alst&gt;\r\n&quot; +
					&quot;			&lt;/alert&gt;\r\n&quot;;

	String category1 = 	&quot;			&lt;catlst&gt;\r\n&quot; +
					&quot;				&lt;cat uid=\&quot;cat-uid-&quot; + tDay + &quot;-${__threadNum}&quot; + &quot;-&quot; + increment + &quot;\&quot;&gt;\r\n&quot; +
					&quot;					&lt;tp&gt;&quot; + catType[new Random().nextInt(2)]   + &quot;&lt;/tp&gt;\r\n&quot; +
					&quot;						&lt;lvl&gt;user&lt;/lvl&gt;\r\n&quot; +
					&quot;						&lt;grp&gt;&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;&lt;/grp&gt;\r\n&quot; +
					&quot;				&lt;/cat&gt;\r\n&quot; +
					&quot;			&lt;/catlst&gt;\r\n&quot; +
					&quot;			&lt;alertlst&gt;\r\n&quot;  ;



String[] alertArray1 = {alert1a};
String[] alertArray2 = {alert2a, alert3};
String[] alertArray3 = {alert4, alert5a, alert6a};
String[] alertArray4 = { category1, alert6b, alert7a, alert8, alert9a};
String[] alertArray5 = {alert1b, alert2b, alert5b, alert6c, alert7b};






if(${host_id_#}==0){
	vars.put(&quot;haveHostId&quot;, &quot;false&quot;);
	}

if(vars.get(&quot;haveHostId&quot;)==&quot;true&quot;){
				
			bw.write(
					&quot;	&lt;usrmig uid=\&quot;${host_id_1}\&quot;&gt;\r\n&quot; 
					);

			bw.write(								
					&quot;  		&lt;alertdestlst&gt;\r\n&quot;
				) ;

			bw.write(								
					&quot;			&lt;alertdest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-1\&quot;&gt;\r\n&quot;	+
					&quot;				&lt;nm&gt;Test alert destination email&lt;/nm&gt;\r\n&quot;	+
					&quot;				&lt;tp&gt;email&lt;/tp&gt;\r\n&quot;	+
					&quot;				&lt;dest&gt;&quot; + tDay + increment + &quot;@email.com&lt;/dest&gt;\r\n&quot;	+
					&quot;				&lt;pridest&gt;0&lt;/pridest&gt;\r\n&quot; +
					&quot;			&lt;/alertdest&gt;\r\n&quot; +
					&quot;			&lt;alertdest uid=\&quot;dest-uid-&quot; + tDay + &quot;-${__threadNum}-&quot; + increment + &quot;-2\&quot;&gt;\r\n&quot; +
					&quot;				&lt;nm&gt;Test alert destination inbox&lt;/nm&gt;\r\n&quot; +
					&quot;				&lt;tp&gt;inbox&lt;/tp&gt;\r\n&quot; +
//					&quot;				&lt;pridest&gt;0&lt;/pridest&gt;\r\n&quot; +
					&quot;			&lt;/alertdest&gt;\r\n&quot; 
				) ;
				
			bw.write(								
					&quot;  		&lt;/alertdestlst&gt;\r\n&quot;
				) ;
					
		switch (numOfAlertsForCurrentUser){
		case 0:
			bw.write(&quot;		 &lt;alertlst&gt;\r\n&quot;);
			break;
			
		case 1:
			bw.write(&quot;		 &lt;alertlst&gt;\r\n&quot;);
			for (int i=0; i&lt;alertArray1.length;i++){
				bw.write(alertArray1[i]);
			}
			break;
		case 2:
			bw.write(&quot;		 &lt;alertlst&gt;\r\n&quot;);
			for (int i=0; i&lt;alertArray2.length;i++){
				bw.write(alertArray2[i]);
			}
			break;
		case 3:
			bw.write(&quot;		 &lt;alertlst&gt;\r\n&quot;);
			for (int i=0; i&lt;alertArray3.length;i++){				
				bw.write(alertArray3[i]);
			}
			break;
		case 4:
			for (int i=0; i&lt;alertArray4.length;i++){
				bw.write(alertArray4[i]);
			}
			break;
		case 5:
			bw.write(&quot;		 &lt;alertlst&gt;\r\n&quot;);
			for (int i=0; i&lt;alertArray5.length; i++){

				bw.write(alertArray5[i]);			
			}
			break;
		}


		

			 bw.write(&quot;	  &lt;/alertlst&gt;\r\n&quot; +  
			 		&quot;    &lt;/usrmig&gt;\r\n&quot;);			


//numOfAlertsForCurrentUser = ${totalAlerts} + numOfAlertsForCurrentUser;
System.out.println(&quot;Total alerts: &quot; +numOfAlertsForCurrentUser);
System.out.println(&quot;increment: &quot; + increment);

int countAlerts = numOfAlertsForCurrentUser;
if (increment&gt;1){
int	countAlerts1 = countAlerts + numOfAlertsForCurrentUser;
System.out.println(&quot;count Alerts: &quot; + countAlerts1);}


}

					


bw.flush();
bw.close();		
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Conduit End" enabled="true">
          <stringProp name="BeanShellSampler.query">
File file = new File(vars.get(&quot;filePath&quot;));
FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
BufferedWriter bw = new BufferedWriter(fw);	

bw.write(&quot;&lt;/usrmiglst&gt;\r\n&lt;/conduit&gt;\n&quot;);
bw.flush();
bw.close();
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="RenameConduitFiles" enabled="true">
          <stringProp name="BeanShellSampler.query">
String path = &quot;${conduitFileDropPath}&quot;;
String name = &quot;${filename}&quot;;

File txtFile = new File(path+name+&quot;.txt&quot;);	
File xmlFile = new File(path+name+&quot;.xml&quot;);

txtFile.renameTo(xmlFile);
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debugger" enabled="true">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
